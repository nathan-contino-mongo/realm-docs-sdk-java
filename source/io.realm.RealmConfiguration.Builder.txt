
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

io.realm.RealmConfiguration.Builder
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _io_realm_RealmConfiguration_Builder:

*Superclass:*

- `java.lang.Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__

RealmConfiguration.Builder used to construct instances of a RealmConfiguration in a fluent manner.
Constructors
============

- ``io.realm.RealmConfiguration.Builder```` ````()``

Method Summary
==============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Method and Description
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`name <io_realm_RealmConfiguration_Builder_name__String__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ filename)
       
       Sets the filename for the Realm file.
       
       
       
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`directory <io_realm_RealmConfiguration_Builder_directory__File__>` (`File <https://docs.oracle.com/javase/7/docs/api/java/io/File.html>`__ directory)
       
       Specifies the directory where the Realm file will be saved.
       
       
       
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`encryptionKey <io_realm_RealmConfiguration_Builder_encryptionKey__byte[]__>` (**byte[] (?)** key)
       
       Sets the 64 byte key used to encrypt and decrypt the Realm file.
       
       
       
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`schemaVersion <io_realm_RealmConfiguration_Builder_schemaVersion__long__>` (**long (?)** schemaVersion)
       
       Sets the schema version of the Realm.
       
       
       
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`migration <io_realm_RealmConfiguration_Builder_migration__RealmMigration__>` (:ref:`RealmMigration <io_realm_RealmMigration>` migration)
       
       Sets the **io.realm.RealmMigration (?)**to be run if a migration is needed.
       
       
       
       
       
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`deleteRealmIfMigrationNeeded <io_realm_RealmConfiguration_Builder_deleteRealmIfMigrationNeeded____>` ()
       
       Setting this will change the behavior of how migration exceptions are handled.
       
       
       
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`inMemory <io_realm_RealmConfiguration_Builder_inMemory____>` ()
       
       Setting this will create an in-memory Realm instead of saving it to disk.
       
       
       
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`modules <io_realm_RealmConfiguration_Builder_modules__Object__Object_____>` (`Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ baseModule, `java.lang.Object[] <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ additionalModules)
       
       Replaces the existing module(s) with one or more **RealmModule (?)**s.
       
       
       
       
       
   
   * - public final :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`addModule <io_realm_RealmConfiguration_Builder_addModule__Object__>` (`Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ module)
       
       FIXME: Temporary visible DEBUG method.
       
       
       
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`rxFactory <io_realm_RealmConfiguration_Builder_rxFactory__RxObservableFactory__>` (:ref:`RxObservableFactory <io_realm_rx_RxObservableFactory>` factory)
       
       Sets the **RxObservableFactory (?)**used to create Rx Observables from Realm objects.
       
       
       
       
       
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`flowFactory <io_realm_RealmConfiguration_Builder_flowFactory__FlowFactory__>` (:ref:`FlowFactory <io_realm_coroutines_FlowFactory>` factory)
       
       Sets the **FlowFactory (?)**used to create coroutines Flows from Realm objects.
       
       
       
       
       
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`initialData <io_realm_RealmConfiguration_Builder_initialData__Realm_Transaction__>` (:ref:`Realm.Transaction <io_realm_Realm_Transaction>` transaction)
       
       Sets the initial data in **io.realm.Realm (?)**.
       
       
       
       
       
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`assetFile <io_realm_RealmConfiguration_Builder_assetFile__String__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ assetFile)
       
       Copies the Realm file from the given asset file path.
       
       
       
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`readOnly <io_realm_RealmConfiguration_Builder_readOnly____>` ()
       
       Setting this will cause the Realm to become read only and all write transactions made against this Realm will fail with an `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException/.html>`__.
       
       
       
       
       
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`compactOnLaunch <io_realm_RealmConfiguration_Builder_compactOnLaunch____>` ()
       
       Setting this will cause Realm to compact the Realm file if the Realm file has grown too large and a significant amount of space can be recovered.
       
       
       
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`compactOnLaunch <io_realm_RealmConfiguration_Builder_compactOnLaunch__CompactOnLaunchCallback__>` (:ref:`CompactOnLaunchCallback <io_realm_CompactOnLaunchCallback>` compactOnLaunch)
       
       Sets this to determine if the Realm file should be compacted before returned to the user.
       
       
       
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`maxNumberOfActiveVersions <io_realm_RealmConfiguration_Builder_maxNumberOfActiveVersions__long__>` (**long (?)** number)
       
       Sets the maximum number of live versions in the Realm file before an `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException/.html>`__is thrown when attempting to write more data.
       
       
       
       
       
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`allowWritesOnUiThread <io_realm_RealmConfiguration_Builder_allowWritesOnUiThread__boolean__>` (**boolean (?)** allowWritesOnUiThread)
       
       Sets whether or not calls to **Realm#executeTransaction (?)**are allowed from the UI thread.
       
       
       
       
       
   
   * - public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>`
     - :ref:`allowQueriesOnUiThread <io_realm_RealmConfiguration_Builder_allowQueriesOnUiThread__boolean__>` (**boolean (?)** allowQueriesOnUiThread)
       
       Sets whether or not a **RealmQuery (?)**can be launched from the UI thread.
       
       
       
       
       
   
   * - public :ref:`RealmConfiguration <io_realm_RealmConfiguration>`
     - :ref:`build <io_realm_RealmConfiguration_Builder_build____>` ()
       
       Creates the RealmConfiguration based on the builder parameters.
       
       
       
   
   
Method Detail
=============

.. _io_realm_RealmConfiguration_Builder_name__String__:

``name``
--------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` name (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ filename)

Sets the filename for the Realm file.
.. _io_realm_RealmConfiguration_Builder_directory__File__:

``directory``
-------------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` directory (`File <https://docs.oracle.com/javase/7/docs/api/java/io/File.html>`__ directory)

Specifies the directory where the Realm file will be saved. The default value is ``context.getFilesDir()``. If the directory does not exist, it will be created.


Parameters
~~~~~~~~~~

- ``directory - ``the directory to save the Realm file in. Directory must be writable.
   

Throws
~~~~~~

.. _io_realm_RealmConfiguration_Builder_encryptionKey__byte[]__:

``encryptionKey``
-----------------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` encryptionKey (**byte[] (?)** key)

Sets the 64 byte key used to encrypt and decrypt the Realm file. Sets the io.realm.Realm#ENCRYPTION_KEY_LENGTHbytes key used to encrypt and decrypt the Realm file.


.. _io_realm_RealmConfiguration_Builder_schemaVersion__long__:

``schemaVersion``
-----------------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` schemaVersion (**long (?)** schemaVersion)

Sets the schema version of the Realm. This must be equal to or higher than the schema version of the existing Realm file, if any. If the schema version is higher than the already existing Realm, a migration is needed.If no migration code is provided, Realm will throw a **io.realm.exceptions.RealmMigrationNeededException (?)**.




See Also
~~~~~~~~

#migration(RealmMigration).. _io_realm_RealmConfiguration_Builder_migration__RealmMigration__:

``migration``
-------------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` migration (:ref:`RealmMigration <io_realm_RealmMigration>` migration)

Sets the **io.realm.RealmMigration (?)**to be run if a migration is needed. If this migration fails to upgrade the on-disc schema to the runtime schema, a **io.realm.exceptions.RealmMigrationNeededException (?)**will be thrown.


.. _io_realm_RealmConfiguration_Builder_deleteRealmIfMigrationNeeded____:

``deleteRealmIfMigrationNeeded``
--------------------------------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` deleteRealmIfMigrationNeeded ()

Setting this will change the behavior of how migration exceptions are handled. Instead of throwing a **io.realm.exceptions.RealmMigrationNeededException (?)**the on-disc Realm will be cleared and recreated with the new Realm schema.

This cannot be configured to have an asset file at the same time by calling **#assetFile(String) (?)**as the provided asset file will be deleted in migrations.



**WARNING!** This will result in loss of data.


Throws
~~~~~~

.. _io_realm_RealmConfiguration_Builder_inMemory____:

``inMemory``
------------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` inMemory ()

Setting this will create an in-memory Realm instead of saving it to disk. In-memory Realms might still use disk space if memory is running low, but all files created by an in-memory Realm will be deleted when the Realm is closed.Note that because in-memory Realms are not persisted, you must be sure to hold on to at least one non-closed reference to the in-memory Realm object with the specific name as long as you want the data to last.


.. _io_realm_RealmConfiguration_Builder_modules__Object__Object_____:

``modules``
-----------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` modules (`Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ baseModule, `java.lang.Object[] <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ additionalModules)

Replaces the existing module(s) with one or more **RealmModule (?)**s. Using this method will replace the current schema for this Realm with the schema defined by the provided modules.

A reference to the default Realm module containing all Realm classes in the project (but not dependencies), can be found using **Realm#getDefaultModule() (?)**. Combining the schema from the app project and a library dependency is thus done using the following code:



``builder.modules(Realm.getDefaultMode(), new MyLibraryModule()); ``




Parameters
~~~~~~~~~~

- ``baseModule - ``the first Realm module (required).
   
- ``additionalModules - ``the additional Realm modules
   

Throws
~~~~~~

See Also
~~~~~~~~

Realm#getDefaultModule().. _io_realm_RealmConfiguration_Builder_addModule__Object__:

``addModule``
-------------

public final :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` addModule (`Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ module)

FIXME: Temporary visible DEBUG method. Will add a module unconditionally. Adds a module to already defined modules.
.. _io_realm_RealmConfiguration_Builder_rxFactory__RxObservableFactory__:

``rxFactory``
-------------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` rxFactory (:ref:`RxObservableFactory <io_realm_rx_RxObservableFactory>` factory)

Sets the **RxObservableFactory (?)**used to create Rx Observables from Realm objects. The default factory is **RealmObservableFactory (?)**.


Parameters
~~~~~~~~~~

- ``factory - ``factory to use.
   

.. _io_realm_RealmConfiguration_Builder_flowFactory__FlowFactory__:

``flowFactory``
---------------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` flowFactory (:ref:`FlowFactory <io_realm_coroutines_FlowFactory>` factory)

Sets the **FlowFactory (?)**used to create coroutines Flows from Realm objects. The default factory is **RealmFlowFactory (?)**.


Parameters
~~~~~~~~~~

- ``factory - ``factory to use.
   

.. _io_realm_RealmConfiguration_Builder_initialData__Realm_Transaction__:

``initialData``
---------------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` initialData (:ref:`Realm.Transaction <io_realm_Realm_Transaction>` transaction)

Sets the initial data in **io.realm.Realm (?)**. This transaction will be executed only for the first time when database file is created or while migrating the data when **Builder#deleteRealmIfMigrationNeeded() (?)**is set.


Parameters
~~~~~~~~~~

- ``transaction - ``transaction to execute.
   

.. _io_realm_RealmConfiguration_Builder_assetFile__String__:

``assetFile``
-------------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` assetFile (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ assetFile)

Copies the Realm file from the given asset file path.When opening the Realm for the first time, instead of creating an empty file, the Realm file will be copied from the provided asset file and used instead.

This cannot be combined with **#deleteRealmIfMigrationNeeded() (?)**as doing so would just result in the copied file being deleted.



WARNING: This could potentially be a lengthy operation and should ideally be done on a background thread.


Parameters
~~~~~~~~~~

- ``assetFile - ``path to the asset database file.
   

Throws
~~~~~~

.. _io_realm_RealmConfiguration_Builder_readOnly____:

``readOnly``
------------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` readOnly ()

Setting this will cause the Realm to become read only and all write transactions made against this Realm will fail with an `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException/.html>`__.

This in particular mean that **#initialData(Realm.Transaction) (?)**will not work in combination with a read only Realm and setting this will result in a `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException/.html>`__being thrown.



Marking a Realm as read only only applies to the Realm in this process. Other processes can still write to the Realm.
.. _io_realm_RealmConfiguration_Builder_compactOnLaunch____:

``compactOnLaunch``
-------------------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` compactOnLaunch ()

Setting this will cause Realm to compact the Realm file if the Realm file has grown too large and a significant amount of space can be recovered. See **DefaultCompactOnLaunchCallback (?)**for details.


.. _io_realm_RealmConfiguration_Builder_compactOnLaunch__CompactOnLaunchCallback__:

``compactOnLaunch``
-------------------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` compactOnLaunch (:ref:`CompactOnLaunchCallback <io_realm_CompactOnLaunchCallback>` compactOnLaunch)

Sets this to determine if the Realm file should be compacted before returned to the user. It is passed the total file size (data + free space) and the bytes used by data in the file.
Parameters
~~~~~~~~~~

- ``compactOnLaunch - ``a callback called when opening a Realm for the first time during the life of a process to determine if it should be compacted before being returned to the user. It is passed the total file size (data + free space) and the bytes used by data in the file.
   

.. _io_realm_RealmConfiguration_Builder_maxNumberOfActiveVersions__long__:

``maxNumberOfActiveVersions``
-----------------------------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` maxNumberOfActiveVersions (**long (?)** number)

Sets the maximum number of live versions in the Realm file before an `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException/.html>`__is thrown when attempting to write more data.

Realm is capable of concurrently handling many different versions of Realm objects. This can e.g. happen if you have a Realm open on many different threads or are freezing objects while data is being written to the file.

Under normal circumstances this is not a problem, but if the number of active versions grow too large, it will have a negative effect on the filesize on disk. Setting this parameters can therefore be used to prevent uses of Realm that can result in very large Realms.


Parameters
~~~~~~~~~~

- ``number - ``the maximum number of active versions before an exception is thrown.
   

See Also
~~~~~~~~

<a href="https://realm.io/docs/java/latest/#faq-large-realm-file-size">FAQ</a>.. _io_realm_RealmConfiguration_Builder_allowWritesOnUiThread__boolean__:

``allowWritesOnUiThread``
-------------------------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` allowWritesOnUiThread (**boolean (?)** allowWritesOnUiThread)

Sets whether or not calls to **Realm#executeTransaction (?)**are allowed from the UI thread.

**WARNING: Realm does not allow synchronous transactions to be run on the main thread unless users explicitly opt in with this method.**We recommend diverting calls to ``executeTransaction``to non-UI threads or, alternatively, using **Realm#executeTransactionAsync (?)**.




.. _io_realm_RealmConfiguration_Builder_allowQueriesOnUiThread__boolean__:

``allowQueriesOnUiThread``
--------------------------

public :ref:`RealmConfiguration.Builder <io_realm_RealmConfiguration_Builder>` allowQueriesOnUiThread (**boolean (?)** allowQueriesOnUiThread)

Sets whether or not a **RealmQuery (?)**can be launched from the UI thread.

By default Realm allows queries on the main thread. However, by doing so your application may experience a drop of frames or even ANRs. We recommend diverting queries to non-UI threads or, alternatively, using **RealmQuery#findAllAsync() (?)**or **RealmQuery#findFirstAsync() (?)**.




.. _io_realm_RealmConfiguration_Builder_build____:

``build``
---------

public :ref:`RealmConfiguration <io_realm_RealmConfiguration>` build ()

Creates the RealmConfiguration based on the builder parameters.

