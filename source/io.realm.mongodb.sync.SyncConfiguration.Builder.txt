
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

io.realm.mongodb.sync.SyncConfiguration.Builder
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _io_realm_mongodb_sync_SyncConfiguration_Builder:

*Superclass:*

- `java.lang.Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__

Builder used to construct instances of a SyncConfiguration in a fluent manner.
Constructors
============

- io.realm.mongodb.sync.SyncConfiguration.Builder(User, String)
- io.realm.mongodb.sync.SyncConfiguration.Builder(User, ObjectId)

Method Summary
==============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Method and Description
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`encryptionKey <io_realm_mongodb_sync_SyncConfiguration_Builder_encryptionKey__byte[]__>` (**byte[] (?)** key)
       
       Sets the io.realm.Realm#ENCRYPTION_KEY_LENGTHbytes key used to encrypt and decrypt the Realm file.
       
       
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`schemaVersion <io_realm_mongodb_sync_SyncConfiguration_Builder_schemaVersion__long__>` (**long (?)** schemaVersion)
       
       Sets the schema version of the Realm.
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`modules <io_realm_mongodb_sync_SyncConfiguration_Builder_modules__Object__Object_____>` (`Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ baseModule, `java.lang.Object[] <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ additionalModules)
       
       Replaces the existing module(s) with one or more **RealmModule (?)**s.
       
       
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`modules <io_realm_mongodb_sync_SyncConfiguration_Builder_modules__Iterable_Object___>` (`java.lang.Iterable\<java.lang.Object> <https://docs.oracle.com/javase/7/docs/api/java/lang/Iterable.html>`__ modules)
       
       Replaces the existing module(s) with one or more **RealmModule (?)**s.
       
       
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`addModule <io_realm_mongodb_sync_SyncConfiguration_Builder_addModule__Object__>` (`Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ module)
       
       Adds a module to the already defined modules.
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`rxFactory <io_realm_mongodb_sync_SyncConfiguration_Builder_rxFactory__RxObservableFactory__>` (:ref:`RxObservableFactory <io_realm_rx_RxObservableFactory>` factory)
       
       Sets the **RxObservableFactory (?)**used to create Rx Observables from Realm objects.
       
       
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`flowFactory <io_realm_mongodb_sync_SyncConfiguration_Builder_flowFactory__FlowFactory__>` (:ref:`FlowFactory <io_realm_coroutines_FlowFactory>` factory)
       
       Sets the **FlowFactory (?)**used to create coroutines Flows from Realm objects.
       
       
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`initialData <io_realm_mongodb_sync_SyncConfiguration_Builder_initialData__Realm_Transaction__>` (:ref:`Realm.Transaction <io_realm_Realm_Transaction>` transaction)
       
       Sets the initial data in **io.realm.Realm (?)**.
       
       
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`inMemory <io_realm_mongodb_sync_SyncConfiguration_Builder_inMemory____>` ()
       
       Setting this will create an in-memory Realm instead of saving it to disk.
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`errorHandler <io_realm_mongodb_sync_SyncConfiguration_Builder_errorHandler__SyncSession_ErrorHandler__>` (:ref:`SyncSession.ErrorHandler <io_realm_mongodb_sync_SyncSession_ErrorHandler>` errorHandler)
       
       Sets the error handler used by this configuration.
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`clientResetHandler <io_realm_mongodb_sync_SyncConfiguration_Builder_clientResetHandler__SyncSession_ClientResetHandler__>` (:ref:`SyncSession.ClientResetHandler <io_realm_mongodb_sync_SyncSession_ClientResetHandler>` handler)
       
       Sets the handler for when a Client Reset occurs.
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`waitForInitialRemoteData <io_realm_mongodb_sync_SyncConfiguration_Builder_waitForInitialRemoteData____>` ()
       
       Setting this will cause the Realm to download all known changes from the server the first time a Realm is opened.
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`waitForInitialRemoteData <io_realm_mongodb_sync_SyncConfiguration_Builder_waitForInitialRemoteData__long__TimeUnit__>` (**long (?)** timeout, `TimeUnit <https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/TimeUnit.html>`__ unit)
       
       Setting this will cause the Realm to download all known changes from the server the first time a Realm is opened.
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`readOnly <io_realm_mongodb_sync_SyncConfiguration_Builder_readOnly____>` ()
       
       Setting this will cause the Realm to become read only and all write transactions made against this Realm will fail with an `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException/.html>`__.
       
       
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`compactOnLaunch <io_realm_mongodb_sync_SyncConfiguration_Builder_compactOnLaunch____>` ()
       
       Setting this will cause Realm to compact the Realm file if the Realm file has grown too large and a significant amount of space can be recovered.
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`compactOnLaunch <io_realm_mongodb_sync_SyncConfiguration_Builder_compactOnLaunch__CompactOnLaunchCallback__>` (:ref:`CompactOnLaunchCallback <io_realm_CompactOnLaunchCallback>` compactOnLaunch)
       
       Sets this to determine if the Realm file should be compacted before returned to the user.
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`urlPrefix <io_realm_mongodb_sync_SyncConfiguration_Builder_urlPrefix__String__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ urlPrefix)
       
       The prefix that is prepended to the path in the WebSocket request that initiates a sync connection to MongoDB Realm.
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`maxNumberOfActiveVersions <io_realm_mongodb_sync_SyncConfiguration_Builder_maxNumberOfActiveVersions__long__>` (**long (?)** number)
       
       Sets the maximum number of live versions in the Realm file before an `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException/.html>`__is thrown when attempting to write more data.
       
       
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`allowWritesOnUiThread <io_realm_mongodb_sync_SyncConfiguration_Builder_allowWritesOnUiThread__boolean__>` (**boolean (?)** allowWritesOnUiThread)
       
       Sets whether or not calls to **Realm#executeTransaction (?)**are allowed from the UI thread.
       
       
       
       
       
   
   * - public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>`
     - :ref:`allowQueriesOnUiThread <io_realm_mongodb_sync_SyncConfiguration_Builder_allowQueriesOnUiThread__boolean__>` (**boolean (?)** allowQueriesOnUiThread)
       
       Sets whether or not ``RealmQueries``are allowed from the UI thread.
       
       
       
       
       
   
   * - public :ref:`SyncConfiguration <io_realm_mongodb_sync_SyncConfiguration>`
     - :ref:`build <io_realm_mongodb_sync_SyncConfiguration_Builder_build____>` ()
       
       Creates the RealmConfiguration based on the builder parameters.
       
       
       
   
   
Method Detail
=============

.. _io_realm_mongodb_sync_SyncConfiguration_Builder_encryptionKey__byte[]__:

``encryptionKey``
-----------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` encryptionKey (**byte[] (?)** key)

Sets the io.realm.Realm#ENCRYPTION_KEY_LENGTHbytes key used to encrypt and decrypt the Realm file.


Parameters
~~~~~~~~~~

- ``key - ``the encryption key.
   

Throws
~~~~~~

.. _io_realm_mongodb_sync_SyncConfiguration_Builder_schemaVersion__long__:

``schemaVersion``
-----------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` schemaVersion (**long (?)** schemaVersion)

Sets the schema version of the Realm.Synced Realms only support additive schema changes which can be applied without requiring a manual migration. The schema version will only be used as an indication to the underlying storage layer to remove or add indexes. These will be recalculated if the provided schema version differ from the version in the Realm file. **WARNING:**There is no guarantee that the value inserted here is the same returned by **Realm#getVersion() (?)**. Due to the nature of synced Realms, the value can both be higher and lower.



- It will be lower if another client with a lesser ``schemaVersion``connected to the server for the first time after this schemaVersion was used.
   
   
   
   
- It will be higher if another client with a higher ``schemaVersion``connected to the server after this Realm was created.
   
   
   
   


Parameters
~~~~~~~~~~

- ``schemaVersion - ``the schema version.
   

Throws
~~~~~~

.. _io_realm_mongodb_sync_SyncConfiguration_Builder_modules__Object__Object_____:

``modules``
-----------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` modules (`Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ baseModule, `java.lang.Object[] <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ additionalModules)

Replaces the existing module(s) with one or more **RealmModule (?)**s. Using this method will replace the current schema for this Realm with the schema defined by the provided modules.

A reference to the default Realm module containing all Realm classes in the project (but not dependencies), can be found using **Realm#getDefaultModule() (?)**. Combining the schema from the app project and a library dependency is thus done using the following code:



``builder.modules(Realm.getDefaultMode(), new MyLibraryModule()); ``




Parameters
~~~~~~~~~~

- ``baseModule - ``the first Realm module (required).
   
- ``additionalModules - ``the additional Realm modules
   

Throws
~~~~~~

See Also
~~~~~~~~

Realm#getDefaultModule().. _io_realm_mongodb_sync_SyncConfiguration_Builder_modules__Iterable_Object___:

``modules``
-----------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` modules (`java.lang.Iterable\<java.lang.Object> <https://docs.oracle.com/javase/7/docs/api/java/lang/Iterable.html>`__ modules)

Replaces the existing module(s) with one or more **RealmModule (?)**s. Using this method will replace the current schema for this Realm with the schema defined by the provided modules.

A reference to the default Realm module containing all Realm classes in the project (but not dependencies), can be found using **Realm#getDefaultModule() (?)**. Combining the schema from the app project and a library dependency is thus done using the following code:



``builder.modules(Realm.getDefaultMode(), new MyLibraryModule()); ``




Parameters
~~~~~~~~~~

- ``modules - ``list of modules tthe first Realm module (required).
   

Throws
~~~~~~

See Also
~~~~~~~~

Realm#getDefaultModule().. _io_realm_mongodb_sync_SyncConfiguration_Builder_addModule__Object__:

``addModule``
-------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` addModule (`Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ module)

Adds a module to the already defined modules.
.. _io_realm_mongodb_sync_SyncConfiguration_Builder_rxFactory__RxObservableFactory__:

``rxFactory``
-------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` rxFactory (:ref:`RxObservableFactory <io_realm_rx_RxObservableFactory>` factory)

Sets the **RxObservableFactory (?)**used to create Rx Observables from Realm objects. The default factory is **RealmObservableFactory (?)**.


Parameters
~~~~~~~~~~

- ``factory - ``factory to use.
   

.. _io_realm_mongodb_sync_SyncConfiguration_Builder_flowFactory__FlowFactory__:

``flowFactory``
---------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` flowFactory (:ref:`FlowFactory <io_realm_coroutines_FlowFactory>` factory)

Sets the **FlowFactory (?)**used to create coroutines Flows from Realm objects. The default factory is **RealmFlowFactory (?)**.


Parameters
~~~~~~~~~~

- ``factory - ``factory to use.
   

.. _io_realm_mongodb_sync_SyncConfiguration_Builder_initialData__Realm_Transaction__:

``initialData``
---------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` initialData (:ref:`Realm.Transaction <io_realm_Realm_Transaction>` transaction)

Sets the initial data in **io.realm.Realm (?)**. This transaction will be executed only the first time the Realm file is opened (created) or while migrating the data if **RealmConfiguration.Builder#deleteRealmIfMigrationNeeded() (?)**is set.


Parameters
~~~~~~~~~~

- ``transaction - ``transaction to execute.
   

.. _io_realm_mongodb_sync_SyncConfiguration_Builder_inMemory____:

``inMemory``
------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` inMemory ()

Setting this will create an in-memory Realm instead of saving it to disk. In-memory Realms might still use disk space if memory is running low, but all files created by an in-memory Realm will be deleted when the Realm is closed.Note that because in-memory Realms are not persisted, you must be sure to hold on to at least one non-closed reference to the in-memory Realm object with the specific name as long as you want the data to last.


.. _io_realm_mongodb_sync_SyncConfiguration_Builder_errorHandler__SyncSession_ErrorHandler__:

``errorHandler``
----------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` errorHandler (:ref:`SyncSession.ErrorHandler <io_realm_mongodb_sync_SyncSession_ErrorHandler>` errorHandler)

Sets the error handler used by this configuration.Only errors not handled by the defined ``SyncPolicy``will be reported to this error handler.




Parameters
~~~~~~~~~~

- ``errorHandler - ``error handler used to report back errors when communicating with the Realm Object Server.
   

Throws
~~~~~~

.. _io_realm_mongodb_sync_SyncConfiguration_Builder_clientResetHandler__SyncSession_ClientResetHandler__:

``clientResetHandler``
----------------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` clientResetHandler (:ref:`SyncSession.ClientResetHandler <io_realm_mongodb_sync_SyncSession_ClientResetHandler>` handler)

Sets the handler for when a Client Reset occurs. If no handler is set, and error is logged when a Client Reset occurs.
Parameters
~~~~~~~~~~

- ``handler - ``custom handler in case of a Client Reset.
   

.. _io_realm_mongodb_sync_SyncConfiguration_Builder_waitForInitialRemoteData____:

``waitForInitialRemoteData``
----------------------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` waitForInitialRemoteData ()

Setting this will cause the Realm to download all known changes from the server the first time a Realm is opened. The Realm will not open until all the data has been downloaded. This means that if a device is offline the Realm will not open.Since downloading all changes can be an lengthy operation that might block the UI thread, Realms with this setting enabled should only be opened on background threads or with **Realm#getInstanceAsync(RealmConfiguration, Realm.Callback) (?)**on the UI thread.



This check is only enforced the first time a Realm is created. If you otherwise want to make sure a Realm has the latest changes, use **SyncSession#downloadAllServerChanges() (?)**.




.. _io_realm_mongodb_sync_SyncConfiguration_Builder_waitForInitialRemoteData__long__TimeUnit__:

``waitForInitialRemoteData``
----------------------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` waitForInitialRemoteData (**long (?)** timeout, `TimeUnit <https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/TimeUnit.html>`__ unit)

Setting this will cause the Realm to download all known changes from the server the first time a Realm is opened. The Realm will not open until all the data has been downloaded. This means that if a device is offline the Realm will not open.Since downloading all changes can be an lengthy operation that might block the UI thread, Realms with this setting enabled should only be opened on background threads or with **Realm#getInstanceAsync(RealmConfiguration, Realm.Callback) (?)**on the UI thread.



This check is only enforced the first time a Realm is created. If you otherwise want to make sure a Realm has the latest changes, use **SyncSession#downloadAllServerChanges() (?)**.




Parameters
~~~~~~~~~~

- ``timeout - ``how long to wait for the download to complete before an **io.realm.exceptions.DownloadingRealmInterruptedException (?)**is thrown.
   
   
   
- ``unit - ``the unit of time used to define the timeout.
   

.. _io_realm_mongodb_sync_SyncConfiguration_Builder_readOnly____:

``readOnly``
------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` readOnly ()

Setting this will cause the Realm to become read only and all write transactions made against this Realm will fail with an `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException/.html>`__.

This in particular mean that **#initialData(Realm.Transaction) (?)**will not work in combination with a read only Realm and setting this will result in a `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException/.html>`__being thrown.



Marking a Realm as read only only applies to the Realm in this process. Other processes and devices can still write to the Realm.
.. _io_realm_mongodb_sync_SyncConfiguration_Builder_compactOnLaunch____:

``compactOnLaunch``
-------------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` compactOnLaunch ()

Setting this will cause Realm to compact the Realm file if the Realm file has grown too large and a significant amount of space can be recovered. See **DefaultCompactOnLaunchCallback (?)**for details.


.. _io_realm_mongodb_sync_SyncConfiguration_Builder_compactOnLaunch__CompactOnLaunchCallback__:

``compactOnLaunch``
-------------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` compactOnLaunch (:ref:`CompactOnLaunchCallback <io_realm_CompactOnLaunchCallback>` compactOnLaunch)

Sets this to determine if the Realm file should be compacted before returned to the user. It is passed the total file size (data + free space) and the bytes used by data in the file.
Parameters
~~~~~~~~~~

- ``compactOnLaunch - ``a callback called when opening a Realm for the first time during the life of a process to determine if it should be compacted before being returned to the user. It is passed the total file size (data + free space) and the bytes used by data in the file.
   

.. _io_realm_mongodb_sync_SyncConfiguration_Builder_urlPrefix__String__:

``urlPrefix``
-------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` urlPrefix (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ urlPrefix)

The prefix that is prepended to the path in the WebSocket request that initiates a sync connection to MongoDB Realm. The value specified must match the server’s configuration otherwise the device will not be able to create a connection. This value is optional and should only be set if a specific firewall rule requires it.
Parameters
~~~~~~~~~~

- ``urlPrefix - ``The prefix to append to the sync connection url.
   

See Also
~~~~~~~~

<a href="https://docs.realm.io/platform/guides/learn-realm-sync-and-integrate-with-a-proxy#adding-a-custom-proxy">Adding a custom proxy</a>.. _io_realm_mongodb_sync_SyncConfiguration_Builder_maxNumberOfActiveVersions__long__:

``maxNumberOfActiveVersions``
-----------------------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` maxNumberOfActiveVersions (**long (?)** number)

Sets the maximum number of live versions in the Realm file before an `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException/.html>`__is thrown when attempting to write more data.

Realm is capable of concurrently handling many different versions of Realm objects. This can happen if you have a Realm open on many different threads or are freezing objects while data is being written to the file.

Under normal circumstances this is not a problem, but if the number of active versions grow too large, it will have a negative effect on the filesize on disk. Setting this parameters can therefore be used to prevent uses of Realm that can result in very large Realms.

Note, the version number will also increase when changes from other devices are integrated on this device, so the number of active versions will also depend on what other devices writing to the same Realm are doing.


Parameters
~~~~~~~~~~

- ``number - ``the maximum number of active versions before an exception is thrown.
   

See Also
~~~~~~~~

<a href="https://realm.io/docs/java/latest/#faq-large-realm-file-size">FAQ</a>.. _io_realm_mongodb_sync_SyncConfiguration_Builder_allowWritesOnUiThread__boolean__:

``allowWritesOnUiThread``
-------------------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` allowWritesOnUiThread (**boolean (?)** allowWritesOnUiThread)

Sets whether or not calls to **Realm#executeTransaction (?)**are allowed from the UI thread.

**WARNING: Realm does not allow synchronous transactions to be run on the main thread unless users explicitly opt in with this method.**We recommend diverting calls to ``executeTransaction``to non-UI threads or, alternatively, using **Realm#executeTransactionAsync (?)**.




.. _io_realm_mongodb_sync_SyncConfiguration_Builder_allowQueriesOnUiThread__boolean__:

``allowQueriesOnUiThread``
--------------------------

public :ref:`SyncConfiguration.Builder <io_realm_mongodb_sync_SyncConfiguration_Builder>` allowQueriesOnUiThread (**boolean (?)** allowQueriesOnUiThread)

Sets whether or not ``RealmQueries``are allowed from the UI thread.

By default Realm allows queries on the main thread. However, by doing so your application may experience a drop of frames or even ANRs. We recommend diverting queries to non-UI threads or, alternatively, using **RealmQuery#findAllAsync() (?)**or **RealmQuery#findFirstAsync() (?)**.




.. _io_realm_mongodb_sync_SyncConfiguration_Builder_build____:

``build``
---------

public :ref:`SyncConfiguration <io_realm_mongodb_sync_SyncConfiguration>` build ()

Creates the RealmConfiguration based on the builder parameters.
Throws
~~~~~~


