
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

io.realm.RealmObjectSchema
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _io_realm_RealmObjectSchema:

*Superclass:*

- `java.lang.Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__

Class for interacting with the schema for a given RealmObject class. This makes it possible to inspect, add, delete or change the fields for given class.If this **RealmObjectSchema (?)**is retrieved from an immutable **RealmSchema (?)**, this **RealmObjectSchema (?)**will be immutable as well.




Nested Class Summary
====================

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Class and Description
   
   * - public static interface
     - io.realm.RealmObjectSchema.Function
   
   
Method Summary
==============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Method and Description
   
   * - public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__
     - :ref:`getClassName <io_realm_RealmObjectSchema_getClassName____>` ()
       
       Returns the name of the RealmObject class being represented by this schema.
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`setClassName <io_realm_RealmObjectSchema_setClassName__String__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ className)
       
       Sets a new name for this RealmObject class.
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`addField <io_realm_RealmObjectSchema_addField__String__Class_____FieldAttribute_____>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, `java.lang.Class\<?> <https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html>`__ fieldType, :ref:`io.realm.FieldAttribute[] <io_realm_FieldAttribute>` attributes)
       
       Adds a new simple field to the RealmObject class.
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`addRealmObjectField <io_realm_RealmObjectSchema_addRealmObjectField__String__RealmObjectSchema__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` objectSchema)
       
       Adds a new field that references another **RealmObject (?)**.
       
       
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`addRealmListField <io_realm_RealmObjectSchema_addRealmListField__String__RealmObjectSchema__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` objectSchema)
       
       Adds a new field that contains a **RealmList (?)**with references to other Realm model classes.
       
       
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`addRealmListField <io_realm_RealmObjectSchema_addRealmListField__String__Class_____>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, `java.lang.Class\<?> <https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html>`__ primitiveType)
       
       Adds a new field that references a **RealmList (?)**with primitive values.
       
       
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`addRealmDictionaryField <io_realm_RealmObjectSchema_addRealmDictionaryField__String__RealmObjectSchema__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` objectSchema)
       
       Adds a new field that contains a **RealmDictionary (?)**with references to other Realm model classes.
       
       
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`addRealmDictionaryField <io_realm_RealmObjectSchema_addRealmDictionaryField__String__Class_____>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, `java.lang.Class\<?> <https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html>`__ primitiveType)
       
       Adds a new field that references a **RealmDictionary (?)**with primitive values.
       
       
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`addRealmSetField <io_realm_RealmObjectSchema_addRealmSetField__String__RealmObjectSchema__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` objectSchema)
       
       Adds a new field that contains a **RealmSet (?)**with references to other Realm model classes.
       
       
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`addRealmSetField <io_realm_RealmObjectSchema_addRealmSetField__String__Class_____>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, `java.lang.Class\<?> <https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html>`__ primitiveType)
       
       Adds a new field that references a **RealmSet (?)**with primitive values.
       
       
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`removeField <io_realm_RealmObjectSchema_removeField__String__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)
       
       Removes a field from the class.
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`renameField <io_realm_RealmObjectSchema_renameField__String__String__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ currentFieldName, `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ newFieldName)
       
       Renames a field from one name to another.
       
       
       
   
   * - public **boolean (?)**
     - :ref:`hasField <io_realm_RealmObjectSchema_hasField__String__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)
       
       Tests if the class has field defined with the given name.
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`addIndex <io_realm_RealmObjectSchema_addIndex__String__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)
       
       Adds an index to a given field.
       
       
       
   
   * - public **boolean (?)**
     - :ref:`hasIndex <io_realm_RealmObjectSchema_hasIndex__String__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)
       
       Checks if a given field has an index defined.
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`removeIndex <io_realm_RealmObjectSchema_removeIndex__String__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)
       
       Removes an index from a given field.
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`addPrimaryKey <io_realm_RealmObjectSchema_addPrimaryKey__String__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)
       
       Adds a primary key to a given field.
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`removePrimaryKey <io_realm_RealmObjectSchema_removePrimaryKey____>` ()
       
       Removes the primary key from this class.
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`setRequired <io_realm_RealmObjectSchema_setRequired__String__boolean__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, **boolean (?)** required)
       
       Sets a field to be required i.e., it is not allowed to hold ``null``values.
       
       
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`setNullable <io_realm_RealmObjectSchema_setNullable__String__boolean__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, **boolean (?)** nullable)
       
       Sets a field to be nullable i.e., it should be able to hold ``null``values.
       
       
       
       
       
   
   * - public **boolean (?)**
     - :ref:`isRequired <io_realm_RealmObjectSchema_isRequired__String__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)
       
       Checks if a given field is required i.e., it is not allowed to contain ``null``values.
       
       
       
       
       
   
   * - public **boolean (?)**
     - :ref:`isNullable <io_realm_RealmObjectSchema_isNullable__String__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)
       
       Checks if a given field is nullable i.e., it is allowed to contain ``null``values.
       
       
       
       
       
   
   * - public **boolean (?)**
     - :ref:`isPrimaryKey <io_realm_RealmObjectSchema_isPrimaryKey__String__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)
       
       Checks if a given field is the primary key field.
       
       
       
   
   * - public **boolean (?)**
     - :ref:`hasPrimaryKey <io_realm_RealmObjectSchema_hasPrimaryKey____>` ()
       
       Checks if the class has a primary key defined.
       
       
       
   
   * - public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__
     - :ref:`getPrimaryKey <io_realm_RealmObjectSchema_getPrimaryKey____>` ()
       
       Returns the name of the primary key field.
       
       
       
   
   * - public `Set <https://docs.oracle.com/javase/7/docs/api/java/util/Set.html>`__
     - :ref:`getFieldNames <io_realm_RealmObjectSchema_getFieldNames____>` ()
       
       Returns all fields in this class.
       
       
       
   
   * - public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`
     - :ref:`transform <io_realm_RealmObjectSchema_transform__RealmObjectSchema_Function__>` (:ref:`RealmObjectSchema.Function <io_realm_RealmObjectSchema_Function>` function)
       
       Runs a transformation function on each RealmObject instance of the current class.
       
       
       
   
   * - public :ref:`RealmFieldType <io_realm_RealmFieldType>`
     - :ref:`getFieldType <io_realm_RealmObjectSchema_getFieldType__String__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)
       
       Returns the type used by the underlying storage engine to represent this field.
       
       
       
   
   * - public **boolean (?)**
     - :ref:`isEmbedded <io_realm_RealmObjectSchema_isEmbedded____>` ()
       
       Returns ``true``if objects of this type are considered "embedded".
       
       
       
       
       
   
   * - public **void (?)**
     - :ref:`setEmbedded <io_realm_RealmObjectSchema_setEmbedded__boolean__>` (**boolean (?)** embedded)
       
       Converts the class to be embedded or not.
       
       
       
   
   
Method Detail
=============

.. _io_realm_RealmObjectSchema_getClassName____:

getClassName
------------

public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ getClassName ()

Returns the name of the RealmObject class being represented by this schema.- When using a normal **Realm (?)**this name is the same as the **RealmObject (?)**class.
   
   
   
   
- When using a **DynamicRealm (?)**this is the name used in all API methods requiring a class name.
   
   
   
   


Throws
~~~~~~

.. _io_realm_RealmObjectSchema_setClassName__String__:

setClassName
------------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` setClassName (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ className)

Sets a new name for this RealmObject class. This is equivalent to renaming it.
Parameters
~~~~~~~~~~

- className - the new name for this class.
   

Throws
~~~~~~

See Also
~~~~~~~~

RealmSchema#rename(String, String).. _io_realm_RealmObjectSchema_addField__String__Class_____FieldAttribute_____:

addField
--------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` addField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, `java.lang.Class\<?> <https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html>`__ fieldType, :ref:`io.realm.FieldAttribute[] <io_realm_FieldAttribute>` attributes)

Adds a new simple field to the RealmObject class. The type must be one supported by Realm. See **RealmObject (?)**for the list of supported types. If the field should allow ``null``values use the boxed type instead e.g., ``Integer.class``instead of ``int.class``.

To add fields that reference other RealmObjects or RealmLists use **#addRealmObjectField(String, RealmObjectSchema) (?)**or **#addRealmListField(String, RealmObjectSchema) (?)**instead.




Parameters
~~~~~~~~~~

- fieldName - name of the field to add.
   
- fieldType - type of field to add. See **RealmObject (?)**for the full list.
   
   
   
- attributes - set of attributes for this field.
   

Throws
~~~~~~

.. _io_realm_RealmObjectSchema_addRealmObjectField__String__RealmObjectSchema__:

addRealmObjectField
-------------------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` addRealmObjectField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` objectSchema)

Adds a new field that references another **RealmObject (?)**.


Parameters
~~~~~~~~~~

- fieldName - name of the field to add.
   
- objectSchema - schema for the Realm type being referenced.
   

Throws
~~~~~~

.. _io_realm_RealmObjectSchema_addRealmListField__String__RealmObjectSchema__:

addRealmListField
-----------------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` addRealmListField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` objectSchema)

Adds a new field that contains a **RealmList (?)**with references to other Realm model classes.

If the list contains primitive types, use **#addRealmListField(String, Class) (?)**instead.




Parameters
~~~~~~~~~~

- fieldName - name of the field to add.
   
- objectSchema - schema for the Realm type being referenced.
   

Throws
~~~~~~

.. _io_realm_RealmObjectSchema_addRealmListField__String__Class_____:

addRealmListField
-----------------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` addRealmListField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, `java.lang.Class\<?> <https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html>`__ primitiveType)

Adds a new field that references a **RealmList (?)**with primitive values. See **RealmObject (?)**for the list of supported types.

Nullability of elements are defined by using the correct class e.g., ``Integer.class``instead of ``int.class``. Alternatively **#setRequired(String, boolean) (?)**can be used.



Example:



.. code-block:: java

   
    // Defines the list of Strings as being non null.
    RealmObjectSchema schema = schema.create("Person")
        .addRealmListField("children", String.class)
        .setRequired("children", true)
    



If the list contains references to other Realm classes, use **#addRealmListField(String, RealmObjectSchema) (?)**instead.


Parameters
~~~~~~~~~~

- fieldName - name of the field to add.
   
- primitiveType - simple type of elements in the array.
   

Throws
~~~~~~

.. _io_realm_RealmObjectSchema_addRealmDictionaryField__String__RealmObjectSchema__:

addRealmDictionaryField
-----------------------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` addRealmDictionaryField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` objectSchema)

Adds a new field that contains a **RealmDictionary (?)**with references to other Realm model classes.

If the dictionary contains primitive types, use **#addRealmDictionaryField(String, Class) (?)**instead.




Parameters
~~~~~~~~~~

- fieldName - name of the field to add.
   
- objectSchema - schema for the Realm type being referenced.
   

Throws
~~~~~~

.. _io_realm_RealmObjectSchema_addRealmDictionaryField__String__Class_____:

addRealmDictionaryField
-----------------------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` addRealmDictionaryField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, `java.lang.Class\<?> <https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html>`__ primitiveType)

Adds a new field that references a **RealmDictionary (?)**with primitive values. See **RealmObject (?)**for the list of supported types.

Nullability of elements are defined by using the correct class e.g., ``Integer.class``instead of ``int.class``. Alternatively **#setRequired(String, boolean) (?)**can be used.



Example:



.. code-block:: java

   
    // Defines the dictionary of Strings as being non null.
    RealmObjectSchema schema = schema.create("Person")
        .addRealmDictionaryField("parentAndChild", String.class)
        .setRequired("parentAndChild", true)
    



If the list contains references to other Realm classes, use **#addRealmDictionaryField(String, RealmObjectSchema) (?)**instead.


Parameters
~~~~~~~~~~

- fieldName - name of the field to add.
   
- primitiveType - simple type of elements in the array.
   

Throws
~~~~~~

.. _io_realm_RealmObjectSchema_addRealmSetField__String__RealmObjectSchema__:

addRealmSetField
----------------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` addRealmSetField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` objectSchema)

Adds a new field that contains a **RealmSet (?)**with references to other Realm model classes.

If the set contains primitive types, use **#addRealmSetField(String, Class) (?)**instead.




Parameters
~~~~~~~~~~

- fieldName - name of the field to add.
   
- objectSchema - schema for the Realm type being referenced.
   

Throws
~~~~~~

.. _io_realm_RealmObjectSchema_addRealmSetField__String__Class_____:

addRealmSetField
----------------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` addRealmSetField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, `java.lang.Class\<?> <https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html>`__ primitiveType)

Adds a new field that references a **RealmSet (?)**with primitive values. See **RealmObject (?)**for the list of supported types.

Nullability of elements are defined by using the correct class e.g., ``Integer.class``instead of ``int.class``. Alternatively **#setRequired(String, boolean) (?)**can be used.



Example:



.. code-block:: java

   
    // Defines the set of Strings as being non null.
    RealmObjectSchema schema = schema.create("Person")
        .addRealmSetField("children", String.class)
        .setRequired("children", true)
    



If the list contains references to other Realm classes, use **#addRealmSetField(String, RealmObjectSchema) (?)**instead.


Parameters
~~~~~~~~~~

- fieldName - name of the field to add.
   
- primitiveType - simple type of elements in the array.
   

Throws
~~~~~~

.. _io_realm_RealmObjectSchema_removeField__String__:

removeField
-----------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` removeField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)

Removes a field from the class.
Parameters
~~~~~~~~~~

- fieldName - field name to remove.
   

Throws
~~~~~~

.. _io_realm_RealmObjectSchema_renameField__String__String__:

renameField
-----------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` renameField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ currentFieldName, `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ newFieldName)

Renames a field from one name to another.
Parameters
~~~~~~~~~~

- currentFieldName - field name to rename.
   
- newFieldName - the new field name.
   

Throws
~~~~~~

.. _io_realm_RealmObjectSchema_hasField__String__:

hasField
--------

public **boolean (?)** hasField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)

Tests if the class has field defined with the given name.
Parameters
~~~~~~~~~~

- fieldName - field name to test.
   

.. _io_realm_RealmObjectSchema_addIndex__String__:

addIndex
--------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` addIndex (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)

Adds an index to a given field. This is the equivalent of adding the **io.realm.annotations.Index (?)**annotation on the field.


Parameters
~~~~~~~~~~

- fieldName - field to add index to.
   

Throws
~~~~~~

.. _io_realm_RealmObjectSchema_hasIndex__String__:

hasIndex
--------

public **boolean (?)** hasIndex (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)

Checks if a given field has an index defined.
Parameters
~~~~~~~~~~

- fieldName - existing field name to check.
   

Throws
~~~~~~

See Also
~~~~~~~~

io.realm.annotations.Index.. _io_realm_RealmObjectSchema_removeIndex__String__:

removeIndex
-----------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` removeIndex (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)

Removes an index from a given field. This is the same as removing the ``@Index``annotation on the field.


Parameters
~~~~~~~~~~

- fieldName - field to remove index from.
   

Throws
~~~~~~

.. _io_realm_RealmObjectSchema_addPrimaryKey__String__:

addPrimaryKey
-------------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` addPrimaryKey (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)

Adds a primary key to a given field. This is the same as adding the **io.realm.annotations.PrimaryKey (?)**annotation on the field. Further, this implicitly adds **io.realm.annotations.Index (?)**annotation to the field as well.


Parameters
~~~~~~~~~~

- fieldName - field to set as primary key.
   

Throws
~~~~~~

.. _io_realm_RealmObjectSchema_removePrimaryKey____:

removePrimaryKey
----------------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` removePrimaryKey ()

Removes the primary key from this class. This is the same as removing the **io.realm.annotations.PrimaryKey (?)**annotation from the class. Further, this implicitly removes **io.realm.annotations.Index (?)**annotation from the field as well.


Throws
~~~~~~

.. _io_realm_RealmObjectSchema_setRequired__String__boolean__:

setRequired
-----------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` setRequired (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, **boolean (?)** required)

Sets a field to be required i.e., it is not allowed to hold ``null``values. This is equivalent to switching between boxed types and their primitive variant e.g., ``Integer``to ``int``.

If the type of designated field is a list of values (not **RealmObject (?)**s , specified nullability only affects its elements, not the field itself. Value list itself is always non-nullable.




Parameters
~~~~~~~~~~

- fieldName - name of field in the class.
   
- required - ``true``if field should be required, ``false``otherwise.
   
   
   

Throws
~~~~~~

See Also
~~~~~~~~

Required.. _io_realm_RealmObjectSchema_setNullable__String__boolean__:

setNullable
-----------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` setNullable (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName, **boolean (?)** nullable)

Sets a field to be nullable i.e., it should be able to hold ``null``values. This is equivalent to switching between primitive types and their boxed variant e.g., ``int``to ``Integer``.

If the type of designated field is a list of values (not **RealmObject (?)**s , specified nullability only affects its elements, not the field itself. Value list itself is always non-nullable.




Parameters
~~~~~~~~~~

- fieldName - name of field in the class.
   
- nullable - ``true``if field should be nullable, ``false``otherwise.
   
   
   

Throws
~~~~~~

.. _io_realm_RealmObjectSchema_isRequired__String__:

isRequired
----------

public **boolean (?)** isRequired (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)

Checks if a given field is required i.e., it is not allowed to contain ``null``values.


Parameters
~~~~~~~~~~

- fieldName - field to check.
   

Throws
~~~~~~

See Also
~~~~~~~~

#setRequired(String, boolean).. _io_realm_RealmObjectSchema_isNullable__String__:

isNullable
----------

public **boolean (?)** isNullable (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)

Checks if a given field is nullable i.e., it is allowed to contain ``null``values.


Parameters
~~~~~~~~~~

- fieldName - field to check.
   

Throws
~~~~~~

See Also
~~~~~~~~

#setNullable(String, boolean).. _io_realm_RealmObjectSchema_isPrimaryKey__String__:

isPrimaryKey
------------

public **boolean (?)** isPrimaryKey (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)

Checks if a given field is the primary key field.
Parameters
~~~~~~~~~~

- fieldName - field to check.
   

Throws
~~~~~~

See Also
~~~~~~~~

#addPrimaryKey(String).. _io_realm_RealmObjectSchema_hasPrimaryKey____:

hasPrimaryKey
-------------

public **boolean (?)** hasPrimaryKey ()

Checks if the class has a primary key defined.
See Also
~~~~~~~~

io.realm.annotations.PrimaryKey.. _io_realm_RealmObjectSchema_getPrimaryKey____:

getPrimaryKey
-------------

public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ getPrimaryKey ()

Returns the name of the primary key field.
Throws
~~~~~~

.. _io_realm_RealmObjectSchema_getFieldNames____:

getFieldNames
-------------

public `Set <https://docs.oracle.com/javase/7/docs/api/java/util/Set.html>`__ getFieldNames ()

Returns all fields in this class.
.. _io_realm_RealmObjectSchema_transform__RealmObjectSchema_Function__:

transform
---------

public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` transform (:ref:`RealmObjectSchema.Function <io_realm_RealmObjectSchema_Function>` function)

Runs a transformation function on each RealmObject instance of the current class. The object will be represented as a **DynamicRealmObject (?)**.

There is no guarantees in which order the objects are returned.


Parameters
~~~~~~~~~~

- function - transformation function.
   

Throws
~~~~~~

.. _io_realm_RealmObjectSchema_getFieldType__String__:

getFieldType
------------

public :ref:`RealmFieldType <io_realm_RealmFieldType>` getFieldType (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ fieldName)

Returns the type used by the underlying storage engine to represent this field.
Parameters
~~~~~~~~~~

- fieldName - name of the target field.
   

.. _io_realm_RealmObjectSchema_isEmbedded____:

isEmbedded
----------

public **boolean (?)** isEmbedded ()

Returns ``true``if objects of this type are considered "embedded". See **RealmClass#embedded() (?)**for further details.


.. _io_realm_RealmObjectSchema_setEmbedded__boolean__:

setEmbedded
-----------

public **void (?)** setEmbedded (**boolean (?)** embedded)

Converts the class to be embedded or not.A class can only be marked as embedded if the following invariants are satisfied:

- The class is not allowed to have a primary key defined.
   
   
- All existing objects of this type, must have one and exactly one parent object already pointing to it. If 0 or more than 1 object has a reference to an object about to be marked embedded an `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException/.html>`__will be thrown.
   
   
   
   


Throws
~~~~~~

See Also
~~~~~~~~

RealmClass#embedded()
