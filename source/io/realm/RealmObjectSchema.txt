
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol



Class RealmObjectSchema
^^^^^^^^^^^^^^^^^^^^^^^

.. _io_realm_RealmObjectSchema:



io.realm
========

`java.lang.Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ 

Class for interacting with the schema for a given RealmObject class. This makes it possible to inspect, add, delete or change the fields for given class.If this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is retrieved from an immutable :ref:`RealmSchema <io_realm_RealmSchema>` , this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  will be immutable as well.






.. seealso::


   
   - :ref:`io.realm.RealmMigration <io_realm_RealmMigration>` 
      
      
      
   
   
   



Nested Class Summary
====================

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Class and Description
   
   * - ``public static interface`` 
     - ``io.realm.RealmObjectSchema.Function`` 
   
   


Method Summary
==============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Method and Description
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`addField <io_realm_RealmObjectSchema_addField_String__Class_____FieldAttribute____>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                    `java.lang.Class\<?> <https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html>`__  fieldType,
                                                    :ref:`io.realm.FieldAttribute[] <io_realm_FieldAttribute>`  attributes)
       
       Adds a new simple field to the RealmObject class.
       
       
       
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`addIndex <io_realm_RealmObjectSchema_addIndex_String_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
       
       Adds an index to a given field.
       
       
       
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`addPrimaryKey <io_realm_RealmObjectSchema_addPrimaryKey_String_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
       
       Adds a primary key to a given field.
       
       
       
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`addRealmDictionaryField <io_realm_RealmObjectSchema_addRealmDictionaryField_String__Class____>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                                   `java.lang.Class\<?> <https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html>`__  primitiveType)
       
       Adds a new field that references a :ref:`RealmDictionary <io_realm_RealmDictionary>`  with primitive values.
       
       
       
       
       
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`addRealmDictionaryField <io_realm_RealmObjectSchema_addRealmDictionaryField_String__RealmObjectSchema_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                                   :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  objectSchema)
       
       Adds a new field that contains a :ref:`RealmDictionary <io_realm_RealmDictionary>`  with references to other Realm model classes.
       
       
       
       
       
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`addRealmListField <io_realm_RealmObjectSchema_addRealmListField_String__Class____>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                             `java.lang.Class\<?> <https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html>`__  primitiveType)
       
       Adds a new field that references a :ref:`RealmList <io_realm_RealmList>`  with primitive values.
       
       
       
       
       
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`addRealmListField <io_realm_RealmObjectSchema_addRealmListField_String__RealmObjectSchema_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                             :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  objectSchema)
       
       Adds a new field that contains a :ref:`RealmList <io_realm_RealmList>`  with references to other Realm model classes.
       
       
       
       
       
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`addRealmObjectField <io_realm_RealmObjectSchema_addRealmObjectField_String__RealmObjectSchema_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                               :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  objectSchema)
       
       Adds a new field that references another :ref:`RealmObject <io_realm_RealmObject>` .
       
       
       
       
       
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`addRealmSetField <io_realm_RealmObjectSchema_addRealmSetField_String__Class____>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                            `java.lang.Class\<?> <https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html>`__  primitiveType)
       
       Adds a new field that references a :ref:`RealmSet <io_realm_RealmSet>`  with primitive values.
       
       
       
       
       
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`addRealmSetField <io_realm_RealmObjectSchema_addRealmSetField_String__RealmObjectSchema_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                            :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  objectSchema)
       
       Adds a new field that contains a :ref:`RealmSet <io_realm_RealmSet>`  with references to other Realm model classes.
       
       
       
       
       
   
   * - 
       public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ 
     - 
       :ref:`getClassName <io_realm_RealmObjectSchema_getClassName__>`  ()
       
       Returns the name of the RealmObject class being represented by this schema.
       
       
       
   
   * - 
       public `Set <https://docs.oracle.com/javase/7/docs/api/java/util/Set.html>`__ 
     - 
       :ref:`getFieldNames <io_realm_RealmObjectSchema_getFieldNames__>`  ()
       
       Returns all fields in this class.
       
       
       
   
   * - 
       public :ref:`RealmFieldType <io_realm_RealmFieldType>` 
     - 
       :ref:`getFieldType <io_realm_RealmObjectSchema_getFieldType_String_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
       
       Returns the type used by the underlying storage engine to represent this field.
       
       
       
   
   * - 
       public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ 
     - 
       :ref:`getPrimaryKey <io_realm_RealmObjectSchema_getPrimaryKey__>`  ()
       
       Returns the name of the primary key field.
       
       
       
   
   * - 
       public **boolean**
     - 
       :ref:`hasField <io_realm_RealmObjectSchema_hasField_String_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
       
       Tests if the class has field defined with the given name.
       
       
       
   
   * - 
       public **boolean**
     - 
       :ref:`hasIndex <io_realm_RealmObjectSchema_hasIndex_String_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
       
       Checks if a given field has an index defined.
       
       
       
   
   * - 
       public **boolean**
     - 
       :ref:`hasPrimaryKey <io_realm_RealmObjectSchema_hasPrimaryKey__>`  ()
       
       Checks if the class has a primary key defined.
       
       
       
   
   * - 
       public **boolean**
     - 
       :ref:`isEmbedded <io_realm_RealmObjectSchema_isEmbedded__>`  ()
       
       Returns ``true``  if objects of this type are considered "embedded".
       
       
       
       
       
   
   * - 
       public **boolean**
     - 
       :ref:`isNullable <io_realm_RealmObjectSchema_isNullable_String_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
       
       Checks if a given field is nullable i.e., it is allowed to contain ``null``  values.
       
       
       
       
       
   
   * - 
       public **boolean**
     - 
       :ref:`isPrimaryKey <io_realm_RealmObjectSchema_isPrimaryKey_String_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
       
       Checks if a given field is the primary key field.
       
       
       
   
   * - 
       public **boolean**
     - 
       :ref:`isRequired <io_realm_RealmObjectSchema_isRequired_String_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
       
       Checks if a given field is required i.e., it is not allowed to contain ``null``  values.
       
       
       
       
       
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`removeField <io_realm_RealmObjectSchema_removeField_String_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
       
       Removes a field from the class.
       
       
       
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`removeIndex <io_realm_RealmObjectSchema_removeIndex_String_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
       
       Removes an index from a given field.
       
       
       
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`removePrimaryKey <io_realm_RealmObjectSchema_removePrimaryKey__>`  ()
       
       Removes the primary key from this class.
       
       
       
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`renameField <io_realm_RealmObjectSchema_renameField_String__String_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  currentFieldName,
                                                       `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  newFieldName)
       
       Renames a field from one name to another.
       
       
       
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`setClassName <io_realm_RealmObjectSchema_setClassName_String_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  className)
       
       Sets a new name for this RealmObject class.
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`setEmbedded <io_realm_RealmObjectSchema_setEmbedded_boolean_>`  (**boolean** embedded)
       
       Converts the class to be embedded or not.
       
       
       
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`setNullable <io_realm_RealmObjectSchema_setNullable_String__boolean_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                       **boolean** nullable)
       
       Sets a field to be nullable i.e., it should be able to hold ``null``  values.
       
       
       
       
       
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`setRequired <io_realm_RealmObjectSchema_setRequired_String__boolean_>`  (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                       **boolean** required)
       
       Sets a field to be required i.e., it is not allowed to hold ``null``  values.
       
       
       
       
       
   
   * - 
       public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>` 
     - 
       :ref:`transform <io_realm_RealmObjectSchema_transform_RealmObjectSchema_Function_>`  (:ref:`RealmObjectSchema.Function <io_realm_RealmObjectSchema_Function>`  function)
       
       Runs a transformation function on each RealmObject instance of the current class.
       
       
       
   
   


Inherited Methods
=================



- Methods inherited from interface `java.lang.Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ : 
   
   ``getClass`` , ``hashCode`` , ``equals`` , ``clone`` , ``toString`` , ``notify`` , ``notifyAll`` , ``wait`` , ``wait`` , ``wait`` , ``finalize`` 
   
   




Method Detail
=============

.. _addField:

.. _addField__:

.. _RealmObjectSchema_addField:

.. _RealmObjectSchema_addField__:

.. _io_realm_RealmObjectSchema_addField:

.. _io_realm_RealmObjectSchema_addField__:



addField
--------

.. _io_realm_RealmObjectSchema_addField_String__Class_____FieldAttribute____:

.. _io_realm_RealmObjectSchema_addField_String_Class_FieldAttribute_:

.. _io_realm_RealmObjectSchema_addField_String__Class__FieldAttribute_:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  addField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                    `java.lang.Class\<?> <https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html>`__  fieldType,
                                                    :ref:`io.realm.FieldAttribute[] <io_realm_FieldAttribute>`  attributes)
   
   * - Adds a new simple field to the RealmObject class. The type must be one supported by Realm. See :ref:`RealmObject <io_realm_RealmObject>`  for the list of supported types. If the field should allow ``null``  values use the boxed type instead e.g., ``Integer.class``  instead of ``int.class`` .
       
       To add fields that reference other RealmObjects or RealmLists use :ref:`addRealmObjectField(String, RealmObjectSchema) <io_realm_RealmObjectSchema_addRealmObjectField_String__RealmObjectSchema_>`  or :ref:`addRealmListField(String, RealmObjectSchema) <io_realm_RealmObjectSchema_addRealmListField_String__RealmObjectSchema_>`  instead.
       
       
       
       
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - name of the field to add.
          
          
          
       - ``fieldType`` - type of field to add. See :ref:`RealmObject <io_realm_RealmObject>`  for the full list.
          
          
          
          
          
       - ``attributes`` - set of attributes for this field.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if the type isn't supported, field name is illegal or a field with that name already exists.
          
          
          
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable or if adding a a field with :ref:`FieldAttribute.PRIMARY_KEY <io_realm_FieldAttribute_PRIMARY_KEY>`  attribute to a schema of a synced Realm.
          
          
          
          
          
       
       
       
       
       
   
   
.. _addIndex:

.. _addIndex__:

.. _RealmObjectSchema_addIndex:

.. _RealmObjectSchema_addIndex__:

.. _io_realm_RealmObjectSchema_addIndex:

.. _io_realm_RealmObjectSchema_addIndex__:



addIndex
--------

.. _io_realm_RealmObjectSchema_addIndex_String_:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  addIndex (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
   
   * - Adds an index to a given field. This is the equivalent of adding the :ref:`io.realm.annotations.Index <io_realm_annotations_Index>`  annotation on the field.
       
       
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - field to add index to.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if field name doesn't exist, the field cannot be indexed or it already has a index defined.
          
          
          
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable.
          
          
          
          
          
       
       
       
       
       
   
   
.. _addPrimaryKey:

.. _addPrimaryKey__:

.. _RealmObjectSchema_addPrimaryKey:

.. _RealmObjectSchema_addPrimaryKey__:

.. _io_realm_RealmObjectSchema_addPrimaryKey:

.. _io_realm_RealmObjectSchema_addPrimaryKey__:



addPrimaryKey
-------------

.. _io_realm_RealmObjectSchema_addPrimaryKey_String_:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  addPrimaryKey (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
   
   * - Adds a primary key to a given field. This is the same as adding the :ref:`io.realm.annotations.PrimaryKey <io_realm_annotations_PrimaryKey>`  annotation on the field. Further, this implicitly adds :ref:`io.realm.annotations.Index <io_realm_annotations_Index>`  annotation to the field as well.
       
       
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - field to set as primary key.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if field name doesn't exist, the field cannot be a primary key or it already has a primary key defined.
          
          
          
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable or of a synced Realm.
          
          
          
          
          
       
       
       
       
       
   
   
.. _addRealmDictionaryField:

.. _addRealmDictionaryField__:

.. _RealmObjectSchema_addRealmDictionaryField:

.. _RealmObjectSchema_addRealmDictionaryField__:

.. _io_realm_RealmObjectSchema_addRealmDictionaryField:

.. _io_realm_RealmObjectSchema_addRealmDictionaryField__:



addRealmDictionaryField
-----------------------

.. _io_realm_RealmObjectSchema_addRealmDictionaryField_String__Class____:

.. _io_realm_RealmObjectSchema_addRealmDictionaryField_String_Class_:

.. _io_realm_RealmObjectSchema_addRealmDictionaryField_String__Class_:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  addRealmDictionaryField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                                   `java.lang.Class\<?> <https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html>`__  primitiveType)
   
   * - Adds a new field that references a :ref:`RealmDictionary <io_realm_RealmDictionary>`  with primitive values. See :ref:`RealmObject <io_realm_RealmObject>`  for the list of supported types.
       
       Nullability of elements are defined by using the correct class e.g., ``Integer.class``  instead of ``int.class`` . Alternatively :ref:`setRequired(String, boolean) <io_realm_RealmObjectSchema_setRequired_String__boolean_>`  can be used.
       
       
       
       Example:
       
        
       
       .. code-block:: java
       
          
           // Defines the dictionary of Strings as being non null.
           RealmObjectSchema schema = schema.create("Person")
               .addRealmDictionaryField("parentAndChild", String.class)
               .setRequired("parentAndChild", true)
           
       
       
        
       
       If the list contains references to other Realm classes, use :ref:`addRealmDictionaryField(String, RealmObjectSchema) <io_realm_RealmObjectSchema_addRealmDictionaryField_String__RealmObjectSchema_>`  instead.
       
       
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - name of the field to add.
          
          
          
       - ``primitiveType`` - simple type of elements in the array.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if the field name is illegal, a field with that name already exists or the element type isn't supported.
          
          
          
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable.
          
          
          
          
          
       
       
       
       
       
   
   
.. _io_realm_RealmObjectSchema_addRealmDictionaryField_String__RealmObjectSchema_:

.. _io_realm_RealmObjectSchema_addRealmDictionaryField_String_RealmObjectSchema_:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  addRealmDictionaryField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                                   :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  objectSchema)
   
   * - Adds a new field that contains a :ref:`RealmDictionary <io_realm_RealmDictionary>`  with references to other Realm model classes.
       
       If the dictionary contains primitive types, use :ref:`addRealmDictionaryField(String, Class) <io_realm_RealmObjectSchema_addRealmDictionaryField_String__Class_>`  instead.
       
       
       
       
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - name of the field to add.
          
          
          
       - ``objectSchema`` - schema for the Realm type being referenced.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if the field name is illegal or a field with that name already exists.
          
          
          
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable.
          
          
          
          
          
       
       
       
       
       
   
   
.. _addRealmListField:

.. _addRealmListField__:

.. _RealmObjectSchema_addRealmListField:

.. _RealmObjectSchema_addRealmListField__:

.. _io_realm_RealmObjectSchema_addRealmListField:

.. _io_realm_RealmObjectSchema_addRealmListField__:



addRealmListField
-----------------

.. _io_realm_RealmObjectSchema_addRealmListField_String__Class____:

.. _io_realm_RealmObjectSchema_addRealmListField_String_Class_:

.. _io_realm_RealmObjectSchema_addRealmListField_String__Class_:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  addRealmListField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                             `java.lang.Class\<?> <https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html>`__  primitiveType)
   
   * - Adds a new field that references a :ref:`RealmList <io_realm_RealmList>`  with primitive values. See :ref:`RealmObject <io_realm_RealmObject>`  for the list of supported types.
       
       Nullability of elements are defined by using the correct class e.g., ``Integer.class``  instead of ``int.class`` . Alternatively :ref:`setRequired(String, boolean) <io_realm_RealmObjectSchema_setRequired_String__boolean_>`  can be used.
       
       
       
       Example:
       
        
       
       .. code-block:: java
       
          
           // Defines the list of Strings as being non null.
           RealmObjectSchema schema = schema.create("Person")
               .addRealmListField("children", String.class)
               .setRequired("children", true)
           
       
       
        
       
       If the list contains references to other Realm classes, use :ref:`addRealmListField(String, RealmObjectSchema) <io_realm_RealmObjectSchema_addRealmListField_String__RealmObjectSchema_>`  instead.
       
       
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - name of the field to add.
          
          
          
       - ``primitiveType`` - simple type of elements in the array.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if the field name is illegal, a field with that name already exists or the element type isn't supported.
          
          
          
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable.
          
          
          
          
          
       
       
       
       
       
   
   
.. _io_realm_RealmObjectSchema_addRealmListField_String__RealmObjectSchema_:

.. _io_realm_RealmObjectSchema_addRealmListField_String_RealmObjectSchema_:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  addRealmListField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                             :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  objectSchema)
   
   * - Adds a new field that contains a :ref:`RealmList <io_realm_RealmList>`  with references to other Realm model classes.
       
       If the list contains primitive types, use :ref:`addRealmListField(String, Class) <io_realm_RealmObjectSchema_addRealmListField_String__Class_>`  instead.
       
       
       
       
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - name of the field to add.
          
          
          
       - ``objectSchema`` - schema for the Realm type being referenced.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if the field name is illegal or a field with that name already exists.
          
          
          
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable.
          
          
          
          
          
       
       
       
       
       
   
   
.. _addRealmObjectField:

.. _addRealmObjectField__:

.. _RealmObjectSchema_addRealmObjectField:

.. _RealmObjectSchema_addRealmObjectField__:

.. _io_realm_RealmObjectSchema_addRealmObjectField:

.. _io_realm_RealmObjectSchema_addRealmObjectField__:



addRealmObjectField
-------------------

.. _io_realm_RealmObjectSchema_addRealmObjectField_String__RealmObjectSchema_:

.. _io_realm_RealmObjectSchema_addRealmObjectField_String_RealmObjectSchema_:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  addRealmObjectField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                               :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  objectSchema)
   
   * - Adds a new field that references another :ref:`RealmObject <io_realm_RealmObject>` .
       
       
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - name of the field to add.
          
          
          
       - ``objectSchema`` - schema for the Realm type being referenced.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if field name is illegal or a field with that name already exists.
          
          
          
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable.
          
          
          
          
          
       
       
       
       
       
   
   
.. _addRealmSetField:

.. _addRealmSetField__:

.. _RealmObjectSchema_addRealmSetField:

.. _RealmObjectSchema_addRealmSetField__:

.. _io_realm_RealmObjectSchema_addRealmSetField:

.. _io_realm_RealmObjectSchema_addRealmSetField__:



addRealmSetField
----------------

.. _io_realm_RealmObjectSchema_addRealmSetField_String__Class____:

.. _io_realm_RealmObjectSchema_addRealmSetField_String_Class_:

.. _io_realm_RealmObjectSchema_addRealmSetField_String__Class_:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  addRealmSetField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                            `java.lang.Class\<?> <https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html>`__  primitiveType)
   
   * - Adds a new field that references a :ref:`RealmSet <io_realm_RealmSet>`  with primitive values. See :ref:`RealmObject <io_realm_RealmObject>`  for the list of supported types.
       
       Nullability of elements are defined by using the correct class e.g., ``Integer.class``  instead of ``int.class`` . Alternatively :ref:`setRequired(String, boolean) <io_realm_RealmObjectSchema_setRequired_String__boolean_>`  can be used.
       
       
       
       Example:
       
        
       
       .. code-block:: java
       
          
           // Defines the set of Strings as being non null.
           RealmObjectSchema schema = schema.create("Person")
               .addRealmSetField("children", String.class)
               .setRequired("children", true)
           
       
       
        
       
       If the list contains references to other Realm classes, use :ref:`addRealmSetField(String, RealmObjectSchema) <io_realm_RealmObjectSchema_addRealmSetField_String__RealmObjectSchema_>`  instead.
       
       
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - name of the field to add.
          
          
          
       - ``primitiveType`` - simple type of elements in the array.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if the field name is illegal, a field with that name already exists or the element type isn't supported.
          
          
          
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable.
          
          
          
          
          
       
       
       
       
       
   
   
.. _io_realm_RealmObjectSchema_addRealmSetField_String__RealmObjectSchema_:

.. _io_realm_RealmObjectSchema_addRealmSetField_String_RealmObjectSchema_:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  addRealmSetField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                            :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  objectSchema)
   
   * - Adds a new field that contains a :ref:`RealmSet <io_realm_RealmSet>`  with references to other Realm model classes.
       
       If the set contains primitive types, use :ref:`addRealmSetField(String, Class) <io_realm_RealmObjectSchema_addRealmSetField_String__Class_>`  instead.
       
       
       
       
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - name of the field to add.
          
          
          
       - ``objectSchema`` - schema for the Realm type being referenced.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if the field name is illegal or a field with that name already exists.
          
          
          
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable.
          
          
          
          
          
       
       
       
       
       
   
   
.. _getClassName:

.. _getClassName__:

.. _RealmObjectSchema_getClassName:

.. _RealmObjectSchema_getClassName__:



getClassName
------------

.. _io_realm_RealmObjectSchema_getClassName__:

.. list-table::
   :header-rows: 1
   
   * -    public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  getClassName ()
   
   * - Returns the name of the RealmObject class being represented by this schema.
       
       - When using a normal :ref:`Realm <io_realm_Realm>`  this name is the same as the :ref:`RealmObject <io_realm_RealmObject>`  class.
          
          
          
          
       - When using a :ref:`DynamicRealm <io_realm_DynamicRealm>`  this is the name used in all API methods requiring a class name.
          
          
          
          
       
       
       
       
       
       
       
       
       
       
       
       **Throws**
       
       - `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if this schema defintion is no longer part of the Realm.
          
          
          
       
       
       
       
       
   
   
.. _getFieldNames:

.. _getFieldNames__:

.. _RealmObjectSchema_getFieldNames:

.. _RealmObjectSchema_getFieldNames__:



getFieldNames
-------------

.. _io_realm_RealmObjectSchema_getFieldNames__:

.. list-table::
   :header-rows: 1
   
   * -    public `Set <https://docs.oracle.com/javase/7/docs/api/java/util/Set.html>`__  getFieldNames ()
   
   * - Returns all fields in this class.
       
       
       
       
       
       
       
       
       
       
       
   
   
.. _getFieldType:

.. _getFieldType__:

.. _RealmObjectSchema_getFieldType:

.. _RealmObjectSchema_getFieldType__:

.. _io_realm_RealmObjectSchema_getFieldType:

.. _io_realm_RealmObjectSchema_getFieldType__:



getFieldType
------------

.. _io_realm_RealmObjectSchema_getFieldType_String_:

.. list-table::
   :header-rows: 1
   
   * -    public :ref:`RealmFieldType <io_realm_RealmFieldType>`  getFieldType (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
   
   * - Returns the type used by the underlying storage engine to represent this field.
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - name of the target field.
          
          
          
       
       
       
       
       
       
       
       
       
   
   
.. _getPrimaryKey:

.. _getPrimaryKey__:

.. _RealmObjectSchema_getPrimaryKey:

.. _RealmObjectSchema_getPrimaryKey__:



getPrimaryKey
-------------

.. _io_realm_RealmObjectSchema_getPrimaryKey__:

.. list-table::
   :header-rows: 1
   
   * -    public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  getPrimaryKey ()
   
   * - Returns the name of the primary key field.
       
       
       
       
       
       
       
       
       **Throws**
       
       - `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if the class doesn't have a primary key defined.
          
          
          
       
       
       
       
       
   
   
.. _hasField:

.. _hasField__:

.. _RealmObjectSchema_hasField:

.. _RealmObjectSchema_hasField__:

.. _io_realm_RealmObjectSchema_hasField:

.. _io_realm_RealmObjectSchema_hasField__:



hasField
--------

.. _io_realm_RealmObjectSchema_hasField_String_:

.. list-table::
   :header-rows: 1
   
   * -    public **boolean** hasField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
   
   * - Tests if the class has field defined with the given name.
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - field name to test.
          
          
          
       
       
       
       
       
       
       
       
       
   
   
.. _hasIndex:

.. _hasIndex__:

.. _RealmObjectSchema_hasIndex:

.. _RealmObjectSchema_hasIndex__:

.. _io_realm_RealmObjectSchema_hasIndex:

.. _io_realm_RealmObjectSchema_hasIndex__:



hasIndex
--------

.. _io_realm_RealmObjectSchema_hasIndex_String_:

.. list-table::
   :header-rows: 1
   
   * -    public **boolean** hasIndex (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
   
   * - Checks if a given field has an index defined.
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - existing field name to check.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if field name doesn't exist.
          
          
          
       
       
       
       
       
       
       .. seealso::
       
       
          
          - :ref:`io.realm.annotations.Index <io_realm_annotations_Index>` 
             
             
             
          
          
          
       
       
   
   
.. _hasPrimaryKey:

.. _hasPrimaryKey__:

.. _RealmObjectSchema_hasPrimaryKey:

.. _RealmObjectSchema_hasPrimaryKey__:



hasPrimaryKey
-------------

.. _io_realm_RealmObjectSchema_hasPrimaryKey__:

.. list-table::
   :header-rows: 1
   
   * -    public **boolean** hasPrimaryKey ()
   
   * - Checks if the class has a primary key defined.
       
       
       
       
       
       
       
       
       
       
       
       
       .. seealso::
       
       
          
          - :ref:`io.realm.annotations.PrimaryKey <io_realm_annotations_PrimaryKey>` 
             
             
             
          
          
          
       
       
   
   
.. _isEmbedded:

.. _isEmbedded__:

.. _RealmObjectSchema_isEmbedded:

.. _RealmObjectSchema_isEmbedded__:



isEmbedded
----------

.. _io_realm_RealmObjectSchema_isEmbedded__:

.. list-table::
   :header-rows: 1
   
   * -    public **boolean** isEmbedded ()
   
   * - Returns ``true``  if objects of this type are considered "embedded". See :ref:`RealmClass.embedded() <io_realm_annotations_RealmClass_embedded__>`  for further details.
       
       
       
       
       
       
       
       
       
       
       
       
       
   
   
.. _isNullable:

.. _isNullable__:

.. _RealmObjectSchema_isNullable:

.. _RealmObjectSchema_isNullable__:

.. _io_realm_RealmObjectSchema_isNullable:

.. _io_realm_RealmObjectSchema_isNullable__:



isNullable
----------

.. _io_realm_RealmObjectSchema_isNullable_String_:

.. list-table::
   :header-rows: 1
   
   * -    public **boolean** isNullable (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
   
   * - Checks if a given field is nullable i.e., it is allowed to contain ``null``  values.
       
       
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - field to check.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if field name doesn't exist.
          
          
          
       
       
       
       
       
       
       .. seealso::
       
       
          
          - :ref:`setNullable(String, boolean) <io_realm_RealmObjectSchema_setNullable_String__boolean_>` 
             
             
             
          
          
          
       
       
   
   
.. _isPrimaryKey:

.. _isPrimaryKey__:

.. _RealmObjectSchema_isPrimaryKey:

.. _RealmObjectSchema_isPrimaryKey__:

.. _io_realm_RealmObjectSchema_isPrimaryKey:

.. _io_realm_RealmObjectSchema_isPrimaryKey__:



isPrimaryKey
------------

.. _io_realm_RealmObjectSchema_isPrimaryKey_String_:

.. list-table::
   :header-rows: 1
   
   * -    public **boolean** isPrimaryKey (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
   
   * - Checks if a given field is the primary key field.
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - field to check.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if field name doesn't exist.
          
          
          
       
       
       
       
       
       
       .. seealso::
       
       
          
          - :ref:`addPrimaryKey(String) <io_realm_RealmObjectSchema_addPrimaryKey_String_>` 
             
             
             
          
          
          
       
       
   
   
.. _isRequired:

.. _isRequired__:

.. _RealmObjectSchema_isRequired:

.. _RealmObjectSchema_isRequired__:

.. _io_realm_RealmObjectSchema_isRequired:

.. _io_realm_RealmObjectSchema_isRequired__:



isRequired
----------

.. _io_realm_RealmObjectSchema_isRequired_String_:

.. list-table::
   :header-rows: 1
   
   * -    public **boolean** isRequired (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
   
   * - Checks if a given field is required i.e., it is not allowed to contain ``null``  values.
       
       
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - field to check.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if field name doesn't exist.
          
          
          
       
       
       
       
       
       
       .. seealso::
       
       
          
          - :ref:`setRequired(String, boolean) <io_realm_RealmObjectSchema_setRequired_String__boolean_>` 
             
             
             
          
          
          
       
       
   
   
.. _removeField:

.. _removeField__:

.. _RealmObjectSchema_removeField:

.. _RealmObjectSchema_removeField__:

.. _io_realm_RealmObjectSchema_removeField:

.. _io_realm_RealmObjectSchema_removeField__:



removeField
-----------

.. _io_realm_RealmObjectSchema_removeField_String_:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  removeField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
   
   * - Removes a field from the class.
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - field name to remove.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if field name doesn't exist.
          
          
          
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable or for a synced Realm.
          
          
          
          
          
       
       
       
       
       
   
   
.. _removeIndex:

.. _removeIndex__:

.. _RealmObjectSchema_removeIndex:

.. _RealmObjectSchema_removeIndex__:

.. _io_realm_RealmObjectSchema_removeIndex:

.. _io_realm_RealmObjectSchema_removeIndex__:



removeIndex
-----------

.. _io_realm_RealmObjectSchema_removeIndex_String_:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  removeIndex (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName)
   
   * - Removes an index from a given field. This is the same as removing the ``@Index``  annotation on the field.
       
       
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - field to remove index from.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if field name doesn't exist or the field doesn't have an index.
          
          
          
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable or of a synced Realm.
          
          
          
          
          
       
       
       
       
       
   
   
.. _removePrimaryKey:

.. _removePrimaryKey__:

.. _RealmObjectSchema_removePrimaryKey:

.. _RealmObjectSchema_removePrimaryKey__:



removePrimaryKey
----------------

.. _io_realm_RealmObjectSchema_removePrimaryKey__:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  removePrimaryKey ()
   
   * - Removes the primary key from this class. This is the same as removing the :ref:`io.realm.annotations.PrimaryKey <io_realm_annotations_PrimaryKey>`  annotation from the class. Further, this implicitly removes :ref:`io.realm.annotations.Index <io_realm_annotations_Index>`  annotation from the field as well.
       
       
       
       
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if the class doesn't have a primary key defined.
          
          
          
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable or of a synced Realm.
          
          
          
          
          
       
       
       
       
       
   
   
.. _renameField:

.. _renameField__:

.. _RealmObjectSchema_renameField:

.. _RealmObjectSchema_renameField__:

.. _io_realm_RealmObjectSchema_renameField:

.. _io_realm_RealmObjectSchema_renameField__:



renameField
-----------

.. _io_realm_RealmObjectSchema_renameField_String__String_:

.. _io_realm_RealmObjectSchema_renameField_String_String_:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  renameField (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  currentFieldName,
                                                       `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  newFieldName)
   
   * - Renames a field from one name to another.
       
       
       
       
       **Parameters**
       
       - ``currentFieldName`` - field name to rename.
          
          
          
       - ``newFieldName`` - the new field name.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if field name doesn't exist or if the new field name already exists.
          
          
          
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable or for a synced Realm.
          
          
          
          
          
       
       
       
       
       
   
   
.. _setClassName:

.. _setClassName__:

.. _RealmObjectSchema_setClassName:

.. _RealmObjectSchema_setClassName__:

.. _io_realm_RealmObjectSchema_setClassName:

.. _io_realm_RealmObjectSchema_setClassName__:



setClassName
------------

.. _io_realm_RealmObjectSchema_setClassName_String_:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  setClassName (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  className)
   
   * - Sets a new name for this RealmObject class. This is equivalent to renaming it.
       
       
       
       
       **Parameters**
       
       - ``className`` - the new name for this class.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if className is ``null``  or an empty string, or its length exceeds 56 characters.
          
          
          
          
          
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable or from a synced Realm.
          
          
          
          
          
       
       
       
       
       
       
       .. seealso::
       
       
          
          - :ref:`RealmSchema.rename(String, String) <io_realm_RealmSchema_rename_String__String_>` 
             
             
             
          
          
          
       
       
   
   
.. _setEmbedded:

.. _setEmbedded__:

.. _RealmObjectSchema_setEmbedded:

.. _RealmObjectSchema_setEmbedded__:

.. _io_realm_RealmObjectSchema_setEmbedded:

.. _io_realm_RealmObjectSchema_setEmbedded__:



setEmbedded
-----------

.. _io_realm_RealmObjectSchema_setEmbedded_boolean_:

.. list-table::
   :header-rows: 1
   
   * -    public **void** setEmbedded (**boolean** embedded)
   
   * - Converts the class to be embedded or not.A class can only be marked as embedded if the following invariants are satisfied:
       
       
       
       - The class is not allowed to have a primary key defined.
          
          
       - All existing objects of this type, must have one and exactly one parent object already pointing to it. If 0 or more than 1 object has a reference to an object about to be marked embedded an `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  will be thrown.
          
          
          
          
       
       
       
       
       
       
       
       
       
       
       
       **Throws**
       
       - `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if the class could not be converted because it broke some of the Embedded Objects invariants.
          
          
          
       
       
       
       
       
       
       .. seealso::
       
       
          
          - :ref:`RealmClass.embedded() <io_realm_annotations_RealmClass_embedded__>` 
             
             
             
          
          
          
       
       
   
   
.. _setNullable:

.. _setNullable__:

.. _RealmObjectSchema_setNullable:

.. _RealmObjectSchema_setNullable__:

.. _io_realm_RealmObjectSchema_setNullable:

.. _io_realm_RealmObjectSchema_setNullable__:



setNullable
-----------

.. _io_realm_RealmObjectSchema_setNullable_String__boolean_:

.. _io_realm_RealmObjectSchema_setNullable_String_boolean_:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  setNullable (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                       **boolean** nullable)
   
   * - Sets a field to be nullable i.e., it should be able to hold ``null``  values. This is equivalent to switching between primitive types and their boxed variant e.g., ``int``  to ``Integer`` .
       
       If the type of designated field is a list of values (not :ref:`RealmObject <io_realm_RealmObject>` s , specified nullability only affects its elements, not the field itself. Value list itself is always non-nullable.
       
       
       
       
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - name of field in the class.
          
          
          
       - ``nullable`` - ``true``  if field should be nullable, ``false``  otherwise.
          
          
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if the field name doesn't exist, or cannot be set as nullable.
          
          
          
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable.
          
          
          
          
          
       
       
       
       
       
   
   
.. _setRequired:

.. _setRequired__:

.. _RealmObjectSchema_setRequired:

.. _RealmObjectSchema_setRequired__:

.. _io_realm_RealmObjectSchema_setRequired:

.. _io_realm_RealmObjectSchema_setRequired__:



setRequired
-----------

.. _io_realm_RealmObjectSchema_setRequired_String__boolean_:

.. _io_realm_RealmObjectSchema_setRequired_String_boolean_:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  setRequired (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  fieldName,
                                                       **boolean** required)
   
   * - Sets a field to be required i.e., it is not allowed to hold ``null``  values. This is equivalent to switching between boxed types and their primitive variant e.g., ``Integer``  to ``int`` .
       
       If the type of designated field is a list of values (not :ref:`RealmObject <io_realm_RealmObject>` s , specified nullability only affects its elements, not the field itself. Value list itself is always non-nullable.
       
       
       
       
       
       
       
       
       **Parameters**
       
       - ``fieldName`` - name of field in the class.
          
          
          
       - ``required`` - ``true``  if field should be required, ``false``  otherwise.
          
          
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if the field name doesn't exist, cannot have the :ref:`Required <io_realm_annotations_Required>`  annotation or the field already have been set as required.
          
          
          
          
          
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable.
          
          
          
          
          
       
       
       
       
       
       
       .. seealso::
       
       
          
          - :ref:`Required <io_realm_annotations_Required>` 
             
             
             
          
          
          
       
       
   
   
.. _transform:

.. _transform__:

.. _RealmObjectSchema_transform:

.. _RealmObjectSchema_transform__:

.. _io_realm_RealmObjectSchema_transform:

.. _io_realm_RealmObjectSchema_transform__:



transform
---------

.. _io_realm_RealmObjectSchema_transform_RealmObjectSchema_Function_:

.. _io_realm_RealmObjectSchema_transform_Function_:

.. list-table::
   :header-rows: 1
   
   * -    public abstract :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  transform (:ref:`RealmObjectSchema.Function <io_realm_RealmObjectSchema_Function>`  function)
   
   * - Runs a transformation function on each RealmObject instance of the current class. The object will be represented as a :ref:`DynamicRealmObject <io_realm_DynamicRealmObject>` .
       
       There is no guarantees in which order the objects are returned.
       
       
       
       
       
       
       **Parameters**
       
       - ``function`` - transformation function.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `UnsupportedOperationException <https://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html>`__  - if this :ref:`RealmObjectSchema <io_realm_RealmObjectSchema>`  is immutable.
          
          
          
          
          
       
       
       
       
       
   
   

