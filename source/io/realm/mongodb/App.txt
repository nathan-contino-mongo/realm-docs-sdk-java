
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol



Class App
^^^^^^^^^

.. _io_realm_mongodb_App:



io.realm.mongodb
================

`java.lang.Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ 

An *App* is the main client-side entry point for interacting with a *MongoDB Realm App*.The *App* can be used to:



- Register uses and perform various user-related operations through authentication providers (:ref:`io.realm.mongodb.auth.ApiKeyAuth <io_realm_mongodb_auth_ApiKeyAuth>` , **EmailPasswordAuthImpl (?)**)
   
   
   
   
- Synchronize data between the local device and a remote Realm App with Synchronized Realms
   
   
- Invoke Realm App functions with :ref:`Functions <io_realm_mongodb_functions_Functions>` 
   
   
   
   
- Access remote data from MongoDB databases with a :ref:`io.realm.mongodb.mongo.MongoClient <io_realm_mongodb_mongo_MongoClient>` 
   
   
   
   


To create an app that is linked with a remote *Realm App* initialize Realm and configure the *App* as shown below:



.. code-block:: java

       class MyApplication extends Application {
   
            App APP; // The App instance should be a global singleton
   
            @Override
            public void onCreate() {
                super.onCreate();
   
                Realm.init(this);
   
                AppConfiguration appConfiguration = new AppConfiguration.Builder(BuildConfig.MONGODB_REALM_APP_ID)
                        .appName(BuildConfig.VERSION_NAME)
                        .appVersion(Integer.toString(BuildConfig.VERSION_CODE))
                        .build();
   
                APP = new App(appConfiguration);
            }
   
        }
    

After configuring the *App* you can start managing users, configure Synchronized Realms, call remote Realm Functions and access remote data through Mongo Collections. The examples below show the synchronized APIs which cannot be used from the main thread. For the equivalent asynchronous counterparts. The example project in please see https://github.com/realm/realm-java/tree/v10/examples/mongoDbRealmExample.

To register a new user and/or login with an existing user do as shown below:



.. code-block:: java

        // Register new user
        APP.getEmailPassword().registerUser(username, password);
   
        // Login with existing user
        User user = APP.login(Credentials.emailPassword(username, password))
    

With an authorized user you can synchronize data between the local device and the remote Realm App by opening a Realm with a :ref:`io.realm.mongodb.sync.SyncConfiguration <io_realm_mongodb_sync_SyncConfiguration>`  as indicated below:





.. code-block:: java

        SyncConfiguration syncConfiguration = new SyncConfiguration.Builder(user, "<partition value>")
                 .build();
   
        Realm instance = Realm.getInstance(syncConfiguration);
        SyncSession session = APP.getSync().getSession(syncConfiguration);
   
        instance.executeTransaction(realm -> {
            realm.insert(...);
        });
        session.uploadAllLocalChanges();
        instance.close();
    

You can call remote Realm functions as shown below:



.. code-block:: java

        Functions functions = user.getFunctions();
        Integer sum = functions.callFunction("sum", Arrays.asList(1, 2, 3, 4), Integer.class);
    

And access collections from the remote Realm App as shown here:



.. code-block:: java

        MongoClient client = user.getMongoClient(SERVICE_NAME)
        MongoDatabase database = client.getDatabase(DATABASE_NAME)
        MongoCollection<DocumentT> collection = database.getCollection(COLLECTION_NAME);
        Long count = collection.count().get()
    




.. seealso::


   
   - :ref:`AppConfiguration.Builder <io_realm_mongodb_AppConfiguration_Builder>` 
      
      
      
   - :ref:`EmailPasswordAuth <io_realm_mongodb_auth_EmailPasswordAuth>` 
      
      
      
   - :ref:`io.realm.mongodb.sync.SyncConfiguration <io_realm_mongodb_sync_SyncConfiguration>` 
      
      
      
   - :ref:`User.getFunctions() <io_realm_mongodb_User_getFunctions__>` 
      
      
      
   - :ref:`User.getMongoClient(String) <io_realm_mongodb_User_getMongoClient_String_>` 
      
      
      
   
   
   



Constructors
============



- ``io.realm.mongodb.App(String)`` 
- ``io.realm.mongodb.App(AppConfiguration)`` 




Nested Class Summary
====================

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Class and Description
   
   * - ``public static`` 
     - ``io.realm.mongodb.App.Result`` 
   
   * - ``public static interface`` 
     - ``io.realm.mongodb.App.Callback`` 
   
   


Field Summary
=============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Field and Description
   
   * - ``public static java.util.concurrent.ThreadPoolExecutor`` 
       
       
     - ``NETWORK_POOL_EXECUTOR`` 
       
       Thread pool used when doing network requests against MongoDB Realm.
        <p>
        This pool is only exposed for testing purposes and replacing it while the queue is not
        empty will result in undefined behaviour.
   
   


Method Summary
==============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Method and Description
   
   * - 
       public **void**
     - 
       :ref:`addAuthenticationListener <io_realm_mongodb_App_addAuthenticationListener_AuthenticationListener_>`  (:ref:`AuthenticationListener <io_realm_mongodb_AuthenticationListener>`  listener)
       
       Sets a global authentication listener that will be notified about User events like login and logout.
       
       
       
   
   * - 
       public `Map <https://docs.oracle.com/javase/7/docs/api/java/util/Map.html>`__ 
     - 
       :ref:`allUsers <io_realm_mongodb_App_allUsers__>`  ()
       
       Returns all known users that are either :ref:`User.State.LOGGED_IN <io_realm_mongodb_User_State_LOGGED_IN>`  or :ref:`User.State.LOGGED_OUT <io_realm_mongodb_User_State_LOGGED_OUT>` .
       
       
       
       
       
   
   * - 
       public :ref:`User <io_realm_mongodb_User>` 
     - 
       :ref:`currentUser <io_realm_mongodb_App_currentUser__>`  ()
       
       Returns the current user that is logged in and still valid.
       
       
       
   
   * - 
       public **boolean**
     - 
       :ref:`equals <io_realm_mongodb_App_equals_Object_>`  (`Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__  o)
       
       Two Apps are considered equal and will share their underlying state if they both refer to the same :ref:`AppConfiguration.getAppId() <io_realm_mongodb_AppConfiguration_getAppId__>` .
       
       
       
       
       
   
   * - 
       public :ref:`AppConfiguration <io_realm_mongodb_AppConfiguration>` 
     - 
       :ref:`getConfiguration <io_realm_mongodb_App_getConfiguration__>`  ()
       
       Returns the configuration object for this app.
       
       
       
   
   * - 
       public :ref:`EmailPasswordAuth <io_realm_mongodb_auth_EmailPasswordAuth>` 
     - 
       :ref:`getEmailPassword <io_realm_mongodb_App_getEmailPassword__>`  ()
       
       Returns a wrapper for interacting with functionality related to users either being created or logged in using the :ref:`Credentials.Provider.EMAIL_PASSWORD <io_realm_mongodb_Credentials_Provider_EMAIL_PASSWORD>`  identity provider.
       
       
       
       
       
   
   * - 
       public :ref:`Functions <io_realm_mongodb_functions_Functions>` 
     - 
       :ref:`getFunctions <io_realm_mongodb_App_getFunctions_User__CodecRegistry_>`  (:ref:`User <io_realm_mongodb_User>`  user,
                                       **CodecRegistry (?)** codecRegistry)
       
       Returns a *Functions* manager for invoking the Realm App's Realm Functions with a custom codec registry for encoding and decoding arguments and results.
       
       
       
   
   * - 
       public :ref:`Functions <io_realm_mongodb_functions_Functions>` 
     - 
       :ref:`getFunctions <io_realm_mongodb_App_getFunctions_User_>`  (:ref:`User <io_realm_mongodb_User>`  user)
       
       Returns a *Functions* manager for invoking the Realm App's Realm Functions.
       
       
       
   
   * - 
       public :ref:`Sync <io_realm_mongodb_sync_Sync>` 
     - 
       :ref:`getSync <io_realm_mongodb_App_getSync__>`  ()
       
       Returns the *Sync* instance managing the ongoing *Realm Sync* sessions synchronizing data between the local and the remote *Realm App* associated with this app.
       
       
       
   
   * - 
       public **int**
     - 
       :ref:`hashCode <io_realm_mongodb_App_hashCode__>`  ()
       
       
       
       
       
   
   * - 
       public :ref:`User <io_realm_mongodb_User>` 
     - 
       :ref:`login <io_realm_mongodb_App_login_Credentials_>`  (:ref:`Credentials <io_realm_mongodb_Credentials>`  credentials)
       
       Logs in as a user with the given credentials associated with an authentication provider.
       
       
       
   
   * - 
       public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>` 
     - 
       :ref:`loginAsync <io_realm_mongodb_App_loginAsync_Credentials__App_Callback_User__>`  (:ref:`Credentials <io_realm_mongodb_Credentials>`  credentials,
                                          :ref:`io.realm.mongodb.App.Callback\<io.realm.mongodb.User> <io_realm_mongodb_App_Callback>`  callback)
       
       Logs in as a user with the given credentials associated with an authentication provider.
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`removeAuthenticationListener <io_realm_mongodb_App_removeAuthenticationListener_AuthenticationListener_>`  (:ref:`AuthenticationListener <io_realm_mongodb_AuthenticationListener>`  listener)
       
       Removes the provided global authentication listener.
       
       
       
   
   * - 
       public :ref:`User <io_realm_mongodb_User>` 
     - 
       :ref:`removeUser <io_realm_mongodb_App_removeUser_User_>`  (:ref:`User <io_realm_mongodb_User>`  user)
       
       Removes a users credentials from this device.
       
       
       
   
   * - 
       protected **void**
     - 
       :ref:`setNetworkTransport <io_realm_mongodb_App_setNetworkTransport_OsJavaNetworkTransport_>`  (:ref:`OsJavaNetworkTransport <io_realm_internal_objectstore_OsJavaNetworkTransport>`  transport)
       
       Exposed for testing.
       
       
       
   
   * - 
       public :ref:`User <io_realm_mongodb_User>` 
     - 
       :ref:`switchUser <io_realm_mongodb_App_switchUser_User_>`  (:ref:`User <io_realm_mongodb_User>`  user)
       
       Switch current user.
       
       
       
   
   


Inherited Methods
=================



- Methods inherited from interface `java.lang.Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ : 
   
   ``getClass`` , ``hashCode`` , ``equals`` , ``clone`` , ``toString`` , ``notify`` , ``notifyAll`` , ``wait`` , ``wait`` , ``wait`` , ``finalize`` 
   
   




Field Detail
============

.. _io_realm_mongodb_App_NETWORK_POOL_EXECUTOR:



``NETWORK_POOL_EXECUTOR`` 
--------------------------

Thread pool used when doing network requests against MongoDB Realm.This pool is only exposed for testing purposes and replacing it while the queue is not empty will result in undefined behaviour.




Method Detail
=============

.. _addAuthenticationListener:

.. _addAuthenticationListener__:

.. _App_addAuthenticationListener:

.. _App_addAuthenticationListener__:

.. _io_realm_mongodb_App_addAuthenticationListener:

.. _io_realm_mongodb_App_addAuthenticationListener__:



addAuthenticationListener
-------------------------

.. _io_realm_mongodb_App_addAuthenticationListener_AuthenticationListener_:

.. _io_realm_mongodb_App_addAuthenticationListener_AuthenticationListener_:

.. _io_realm_mongodb_App_addAuthenticationListener_AuthenticationListener_:

.. list-table::
   :header-rows: 1
   
   * -    public **void** addAuthenticationListener (:ref:`AuthenticationListener <io_realm_mongodb_AuthenticationListener>`  listener)
   
   * - Sets a global authentication listener that will be notified about User events like login and logout.Callbacks to authentication listeners will happen on the UI thread.
       
       
       
       
       
       
       **Parameters**
       
       - ``listener`` - listener to register.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if ``listener``  is ``null`` .
          
          
          
          
          
       
       
       
       
       
   
   
.. _allUsers:

.. _allUsers__:

.. _App_allUsers:

.. _App_allUsers__:

.. _io_realm_mongodb_App_allUsers:

.. _io_realm_mongodb_App_allUsers__:



allUsers
--------

.. _io_realm_mongodb_App_allUsers__:

.. _io_realm_mongodb_App_allUsers__:

.. _io_realm_mongodb_App_allUsers__:

.. list-table::
   :header-rows: 1
   
   * -    public `Map <https://docs.oracle.com/javase/7/docs/api/java/util/Map.html>`__  allUsers ()
   
   * - Returns all known users that are either :ref:`User.State.LOGGED_IN <io_realm_mongodb_User_State_LOGGED_IN>`  or :ref:`User.State.LOGGED_OUT <io_realm_mongodb_User_State_LOGGED_OUT>` .
       
       Only users that at some point logged into this device will be returned.
       
       
       
       
       
       
       
       
       
       
       
       
       
   
   
.. _currentUser:

.. _currentUser__:

.. _App_currentUser:

.. _App_currentUser__:

.. _io_realm_mongodb_App_currentUser:

.. _io_realm_mongodb_App_currentUser__:



currentUser
-----------

.. _io_realm_mongodb_App_currentUser__:

.. _io_realm_mongodb_App_currentUser__:

.. _io_realm_mongodb_App_currentUser__:

.. list-table::
   :header-rows: 1
   
   * -    public :ref:`User <io_realm_mongodb_User>`  currentUser ()
   
   * - Returns the current user that is logged in and still valid.A user is invalidated when he/she logs out or the user's refresh token expires or is revoked.
       
       If two or more users are logged in, it is the last valid user that is returned by this method.
       
       
       
       
       
       
       
       
       
       
       
       
       
   
   
.. _equals:

.. _equals__:

.. _App_equals:

.. _App_equals__:

.. _io_realm_mongodb_App_equals:

.. _io_realm_mongodb_App_equals__:



equals
------

.. _io_realm_mongodb_App_equals_Object_:

.. _io_realm_mongodb_App_equals_Object_:

.. _io_realm_mongodb_App_equals_Object_:

.. list-table::
   :header-rows: 1
   
   * -    public **boolean** equals (`Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__  o)
   
   * - Two Apps are considered equal and will share their underlying state if they both refer to the same :ref:`AppConfiguration.getAppId() <io_realm_mongodb_AppConfiguration_getAppId__>` .
       
       
       
       
       
       
       
       
       
       
       
       
       
   
   
.. _getConfiguration:

.. _getConfiguration__:

.. _App_getConfiguration:

.. _App_getConfiguration__:

.. _io_realm_mongodb_App_getConfiguration:

.. _io_realm_mongodb_App_getConfiguration__:



getConfiguration
----------------

.. _io_realm_mongodb_App_getConfiguration__:

.. _io_realm_mongodb_App_getConfiguration__:

.. _io_realm_mongodb_App_getConfiguration__:

.. list-table::
   :header-rows: 1
   
   * -    public :ref:`AppConfiguration <io_realm_mongodb_AppConfiguration>`  getConfiguration ()
   
   * - Returns the configuration object for this app.
       
       
       
       
       
       
       
       
       
       
       
   
   
.. _getEmailPassword:

.. _getEmailPassword__:

.. _App_getEmailPassword:

.. _App_getEmailPassword__:

.. _io_realm_mongodb_App_getEmailPassword:

.. _io_realm_mongodb_App_getEmailPassword__:



getEmailPassword
----------------

.. _io_realm_mongodb_App_getEmailPassword__:

.. _io_realm_mongodb_App_getEmailPassword__:

.. _io_realm_mongodb_App_getEmailPassword__:

.. list-table::
   :header-rows: 1
   
   * -    public :ref:`EmailPasswordAuth <io_realm_mongodb_auth_EmailPasswordAuth>`  getEmailPassword ()
   
   * - Returns a wrapper for interacting with functionality related to users either being created or logged in using the :ref:`Credentials.Provider.EMAIL_PASSWORD <io_realm_mongodb_Credentials_Provider_EMAIL_PASSWORD>`  identity provider.
       
       
       
       
       
       
       
       
       
       
       
       
       
   
   
.. _getFunctions:

.. _getFunctions__:

.. _App_getFunctions:

.. _App_getFunctions__:

.. _io_realm_mongodb_App_getFunctions:

.. _io_realm_mongodb_App_getFunctions__:



getFunctions
------------

.. _io_realm_mongodb_App_getFunctions_User__CodecRegistry_:

.. _io_realm_mongodb_App_getFunctions_User_CodecRegistry_:

.. _io_realm_mongodb_App_getFunctions_User__CodecRegistry_:

.. list-table::
   :header-rows: 1
   
   * -    public :ref:`Functions <io_realm_mongodb_functions_Functions>`  getFunctions (:ref:`User <io_realm_mongodb_User>`  user,
                                       **CodecRegistry (?)** codecRegistry)
   
   * - Returns a *Functions* manager for invoking the Realm App's Realm Functions with a custom codec registry for encoding and decoding arguments and results.
       
       
       
       
       
       
       
       
       
       
       
       
       .. seealso::
       
       
          
          - :ref:`Functions <io_realm_mongodb_functions_Functions>` 
             
             
             
          
          
          
       
       
   
   
.. _io_realm_mongodb_App_getFunctions_User_:

.. _io_realm_mongodb_App_getFunctions_User_:

.. _io_realm_mongodb_App_getFunctions_User_:

.. list-table::
   :header-rows: 1
   
   * -    public :ref:`Functions <io_realm_mongodb_functions_Functions>`  getFunctions (:ref:`User <io_realm_mongodb_User>`  user)
   
   * - Returns a *Functions* manager for invoking the Realm App's Realm Functions.This will use the app's default codec registry to encode and decode arguments and results.
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       .. seealso::
       
       
          
          - :ref:`Functions <io_realm_mongodb_functions_Functions>` 
             
             
             
          - :ref:`AppConfiguration.getDefaultCodecRegistry() <io_realm_mongodb_AppConfiguration_getDefaultCodecRegistry__>` 
             
             
             
          
          
          
       
       
   
   
.. _getSync:

.. _getSync__:

.. _App_getSync:

.. _App_getSync__:

.. _io_realm_mongodb_App_getSync:

.. _io_realm_mongodb_App_getSync__:



getSync
-------

.. _io_realm_mongodb_App_getSync__:

.. _io_realm_mongodb_App_getSync__:

.. _io_realm_mongodb_App_getSync__:

.. list-table::
   :header-rows: 1
   
   * -    public :ref:`Sync <io_realm_mongodb_sync_Sync>`  getSync ()
   
   * - Returns the *Sync* instance managing the ongoing *Realm Sync* sessions synchronizing data between the local and the remote *Realm App* associated with this app.
       
       
       
       
       
       
       
       
       
       
       
   
   
.. _hashCode:

.. _hashCode__:

.. _App_hashCode:

.. _App_hashCode__:

.. _io_realm_mongodb_App_hashCode:

.. _io_realm_mongodb_App_hashCode__:



hashCode
--------

.. _io_realm_mongodb_App_hashCode__:

.. _io_realm_mongodb_App_hashCode__:

.. _io_realm_mongodb_App_hashCode__:

.. list-table::
   :header-rows: 1
   
   * -    public **int** hashCode ()
   
   * - 
       
       
       
       
       
       
       
       
       
       
       
   
   
.. _login:

.. _login__:

.. _App_login:

.. _App_login__:

.. _io_realm_mongodb_App_login:

.. _io_realm_mongodb_App_login__:



login
-----

.. _io_realm_mongodb_App_login_Credentials_:

.. _io_realm_mongodb_App_login_Credentials_:

.. _io_realm_mongodb_App_login_Credentials_:

.. list-table::
   :header-rows: 1
   
   * -    public :ref:`User <io_realm_mongodb_User>`  login (:ref:`Credentials <io_realm_mongodb_Credentials>`  credentials)
   
   * - Logs in as a user with the given credentials associated with an authentication provider.The user who logs in becomes the current user. Other App functionality acts on behalf of the current user.
       
       If there was already a current user, that user is still logged in and can be found in the list returned by :ref:`allUsers() <io_realm_mongodb_App_allUsers__>` .
       
       
       
       It is also possible to switch between which user is considered the current user by using :ref:`switchUser(User) <io_realm_mongodb_App_switchUser_User_>` .
       
       
       
       
       
       
       
       
       **Parameters**
       
       - ``credentials`` - the credentials representing the type of login.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - :ref:`AppException <io_realm_mongodb_AppException>`  - if the user could not be logged in.
          
          
          
       
       
       
       
       
   
   
.. _loginAsync:

.. _loginAsync__:

.. _App_loginAsync:

.. _App_loginAsync__:

.. _io_realm_mongodb_App_loginAsync:

.. _io_realm_mongodb_App_loginAsync__:



loginAsync
----------

.. _io_realm_mongodb_App_loginAsync_Credentials__App_Callback_User__:

.. _io_realm_mongodb_App_loginAsync_Credentials_Callback_:

.. _io_realm_mongodb_App_loginAsync_Credentials__App_Callback_:

.. list-table::
   :header-rows: 1
   
   * -    public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>`  loginAsync (:ref:`Credentials <io_realm_mongodb_Credentials>`  credentials,
                                          :ref:`io.realm.mongodb.App.Callback\<io.realm.mongodb.User> <io_realm_mongodb_App_Callback>`  callback)
   
   * - Logs in as a user with the given credentials associated with an authentication provider.The user who logs in becomes the current user. Other App functionality acts on behalf of the current user.
       
       If there was already a current user, that user is still logged in and can be found in the list returned by :ref:`allUsers() <io_realm_mongodb_App_allUsers__>` .
       
       
       
       It is also possible to switch between which user is considered the current user by using :ref:`switchUser(User) <io_realm_mongodb_App_switchUser_User_>` .
       
       
       
       
       
       
       
       
       **Parameters**
       
       - ``credentials`` - the credentials representing the type of login.
          
          
          
       - ``callback`` - callback when logging in has completed or failed. The callback will always happen on the same thread as this method is called on.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__  - if not called on a looper thread.
          
          
          
       
       
       
       
       
   
   
.. _removeAuthenticationListener:

.. _removeAuthenticationListener__:

.. _App_removeAuthenticationListener:

.. _App_removeAuthenticationListener__:

.. _io_realm_mongodb_App_removeAuthenticationListener:

.. _io_realm_mongodb_App_removeAuthenticationListener__:



removeAuthenticationListener
----------------------------

.. _io_realm_mongodb_App_removeAuthenticationListener_AuthenticationListener_:

.. _io_realm_mongodb_App_removeAuthenticationListener_AuthenticationListener_:

.. _io_realm_mongodb_App_removeAuthenticationListener_AuthenticationListener_:

.. list-table::
   :header-rows: 1
   
   * -    public **void** removeAuthenticationListener (:ref:`AuthenticationListener <io_realm_mongodb_AuthenticationListener>`  listener)
   
   * - Removes the provided global authentication listener.
       
       
       
       
       **Parameters**
       
       - ``listener`` - listener to remove.
          
          
          
       
       
       
       
       
       
       
       
       
   
   
.. _removeUser:

.. _removeUser__:

.. _App_removeUser:

.. _App_removeUser__:

.. _io_realm_mongodb_App_removeUser:

.. _io_realm_mongodb_App_removeUser__:



removeUser
----------

.. _io_realm_mongodb_App_removeUser_User_:

.. _io_realm_mongodb_App_removeUser_User_:

.. _io_realm_mongodb_App_removeUser_User_:

.. list-table::
   :header-rows: 1
   
   * -    public :ref:`User <io_realm_mongodb_User>`  removeUser (:ref:`User <io_realm_mongodb_User>`  user)
   
   * - Removes a users credentials from this device. If the user was currently logged in, they will be logged out as part of the process. This is only a local change and does not affect the user state on the server.
       
       
       
       
       **Parameters**
       
       - ``user`` - to remove
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - :ref:`AppException <io_realm_mongodb_AppException>`  - if called from the UI thread or if the user was logged in, but could not be logged out.
          
          
          
       
       
       
       
       
   
   
.. _setNetworkTransport:

.. _setNetworkTransport__:

.. _App_setNetworkTransport:

.. _App_setNetworkTransport__:

.. _io_realm_mongodb_App_setNetworkTransport:

.. _io_realm_mongodb_App_setNetworkTransport__:



setNetworkTransport
-------------------

.. _io_realm_mongodb_App_setNetworkTransport_OsJavaNetworkTransport_:

.. _io_realm_mongodb_App_setNetworkTransport_OsJavaNetworkTransport_:

.. _io_realm_mongodb_App_setNetworkTransport_OsJavaNetworkTransport_:

.. list-table::
   :header-rows: 1
   
   * -    protected **void** setNetworkTransport (:ref:`OsJavaNetworkTransport <io_realm_internal_objectstore_OsJavaNetworkTransport>`  transport)
   
   * - Exposed for testing.Swap the currently configured network transport with the provided one. This should only be done if no network requests are currently running.
       
       
       
       
       
       
       
       
       
       
       
       
       
   
   
.. _switchUser:

.. _switchUser__:

.. _App_switchUser:

.. _App_switchUser__:

.. _io_realm_mongodb_App_switchUser:

.. _io_realm_mongodb_App_switchUser__:



switchUser
----------

.. _io_realm_mongodb_App_switchUser_User_:

.. _io_realm_mongodb_App_switchUser_User_:

.. _io_realm_mongodb_App_switchUser_User_:

.. list-table::
   :header-rows: 1
   
   * -    public :ref:`User <io_realm_mongodb_User>`  switchUser (:ref:`User <io_realm_mongodb_User>`  user)
   
   * - Switch current user.The current user is the user returned by :ref:`currentUser() <io_realm_mongodb_App_currentUser__>` .
       
       
       
       
       
       
       
       
       **Parameters**
       
       - ``user`` - the new current user.
          
          
          
       
       
       
       
       
       
       **Throws**
       
       - `IllegalArgumentException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html>`__  - if the user is is not :ref:`User.State.LOGGED_IN <io_realm_mongodb_User_State_LOGGED_IN>` .
          
          
          
          
          
       
       
       
       
       
   
   

