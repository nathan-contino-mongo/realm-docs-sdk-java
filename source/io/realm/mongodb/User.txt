
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

io.realm.mongodb.User
^^^^^^^^^^^^^^^^^^^^^

.. _io_realm_mongodb_User:

*Superclass:*

- `java.lang.Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__

A *user* holds the user's meta data and tokens for accessing Realm App functionality.The user is used to configure Synchronized Realms and gives access to calling Realm App *Functions* through :ref:`Functions <io_realm_mongodb_functions_Functions>` and accessing remote Realm App 

*Mongo Databases* through a :ref:`MongoClient <io_realm_mongodb_mongo_MongoClient>`.




Nested Class Summary
====================

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Class and Description
   
   * - ``public static final``
     - ``io.realm.mongodb.User.State``
   
   
Method Summary
==============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Method and Description
   
   * - public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__
     - :ref:`getId <io_realm_mongodb_User_getId__>` ()
       
       Returns the server id of the user.
       
       
       
   
   * - public :ref:`UserProfile <io_realm_mongodb_UserProfile>`
     - :ref:`getProfile <io_realm_mongodb_User_getProfile__>` ()
       
       Returns the profile for this user.
       
       
       
   
   * - public `List <https://docs.oracle.com/javase/7/docs/api/java/util/List.html>`__
     - :ref:`getIdentities <io_realm_mongodb_User_getIdentities__>` ()
       
       Returns a new list of the user's identities.
       
       
       
   
   * - public :ref:`Credentials.Provider <io_realm_mongodb_Credentials_Provider>`
     - :ref:`getProviderType <io_realm_mongodb_User_getProviderType__>` ()
       
       Returns the provider type used to log the user
       
       
       
   
   * - public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__
     - :ref:`getAccessToken <io_realm_mongodb_User_getAccessToken__>` ()
       
       Returns the current access token for the user.
       
       
       
   
   * - public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__
     - :ref:`getRefreshToken <io_realm_mongodb_User_getRefreshToken__>` ()
       
       Returns the current refresh token for the user.
       
       
       
   
   * - public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__
     - :ref:`getDeviceId <io_realm_mongodb_User_getDeviceId__>` ()
       
       Returns a unique identifier for the device the user logged in to.
       
       
       
   
   * - public :ref:`App <io_realm_mongodb_App>`
     - :ref:`getApp <io_realm_mongodb_User_getApp__>` ()
       
       Returns the :ref:`App <io_realm_mongodb_App>` this user is associated with.
       
       
       
       
       
   
   * - public :ref:`User.State <io_realm_mongodb_User_State>`
     - :ref:`getState <io_realm_mongodb_User_getState__>` ()
       
       Returns the :ref:`State <io_realm_mongodb_User_State>` the user is in.
       
       
       
       
       
   
   * - public **Document (?)**
     - :ref:`getCustomData <io_realm_mongodb_User_getCustomData__>` ()
       
       Return the custom user data associated with the user in the Realm App.
       
       
       
   
   * - public **Document (?)**
     - :ref:`refreshCustomData <io_realm_mongodb_User_refreshCustomData__>` ()
       
       Re-fetch custom user data from the Realm App.
       
       
       
   
   * - public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>`
     - :ref:`refreshCustomData <io_realm_mongodb_User_refreshCustomData_App_Callback_Document__>` (:ref:`io.realm.mongodb.App.Callback\<Document> <io_realm_mongodb_App_Callback>` callback)
       
       Re-fetch custom user data from the Realm App asynchronously.
       
       
       
   
   * - public **boolean**
     - :ref:`isLoggedIn <io_realm_mongodb_User_isLoggedIn__>` ()
       
       Returns true if the user is currently logged in.
       
       
       
   
   * - public :ref:`User <io_realm_mongodb_User>`
     - :ref:`linkCredentials <io_realm_mongodb_User_linkCredentials_Credentials_>` (:ref:`Credentials <io_realm_mongodb_Credentials>` credentials)
       
       Links the current user with a new user identity represented by the given credentials.
       
       
       
   
   * - public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>`
     - :ref:`linkCredentialsAsync <io_realm_mongodb_User_linkCredentialsAsync_Credentials__App_Callback_User__>` (:ref:`Credentials <io_realm_mongodb_Credentials>` credentials, :ref:`io.realm.mongodb.App.Callback\<io.realm.mongodb.User> <io_realm_mongodb_App_Callback>` callback)
       
       Links the current user with a new user identity represented by the given credentials.
       
       
       
   
   * - public **void**
     - :ref:`logOut <io_realm_mongodb_User_logOut__>` ()
       
       Log the user out of the Realm App.
       
       
       
   
   * - public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>`
     - :ref:`logOutAsync <io_realm_mongodb_User_logOutAsync_App_Callback_User__>` (:ref:`io.realm.mongodb.App.Callback\<io.realm.mongodb.User> <io_realm_mongodb_App_Callback>` callback)
       
       Log the user out of the Realm App asynchronously.
       
       
       
   
   * - public synchronized :ref:`ApiKeyAuth <io_realm_mongodb_auth_ApiKeyAuth>`
     - :ref:`getApiKeys <io_realm_mongodb_User_getApiKeys__>` ()
       
       Returns a wrapper for managing API keys controlled by the current user.
       
       
       
   
   * - public synchronized :ref:`Functions <io_realm_mongodb_functions_Functions>`
     - :ref:`getFunctions <io_realm_mongodb_User_getFunctions__>` ()
       
       Returns a *functions* manager for invoking MongoDB Realm Functions.
       
       
       
   
   * - public :ref:`Functions <io_realm_mongodb_functions_Functions>`
     - :ref:`getFunctions <io_realm_mongodb_User_getFunctions_CodecRegistry_>` (**CodecRegistry (?)** codecRegistry)
       
       Returns a *functions* manager for invoking Realm Functions with custom codec registry for encoding and decoding arguments and results.
       
       
       
   
   * - public synchronized :ref:`Push <io_realm_mongodb_push_Push>`
     - :ref:`getPush <io_realm_mongodb_User_getPush_String_>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ serviceName)
       
       Returns the :ref:`Push <io_realm_mongodb_push_Push>` instance for managing push notification registrations.
       
       
       
       
       
   
   * - public synchronized :ref:`MongoClient <io_realm_mongodb_mongo_MongoClient>`
     - :ref:`getMongoClient <io_realm_mongodb_User_getMongoClient_String_>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ serviceName)
       
       Returns a :ref:`MongoClient <io_realm_mongodb_mongo_MongoClient>` instance for accessing documents in the database.
       
       
       
       
       
   
   * - public **boolean**
     - :ref:`equals <io_realm_mongodb_User_equals_Object_>` (`Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ o)
       
       Two Users are considered equal if they have the same user identity and are associated with the same app.
       
       
       
   
   * - public **int**
     - :ref:`hashCode <io_realm_mongodb_User_hashCode__>` ()
       
       
       
       
       
   
   
Method Detail
=============

getId
-----

.. _io_realm_mongodb_User_getId__:

public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ getId ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the server id of the user.
getProfile
----------

.. _io_realm_mongodb_User_getProfile__:

public :ref:`UserProfile <io_realm_mongodb_UserProfile>` getProfile ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the profile for this user.
getIdentities
-------------

.. _io_realm_mongodb_User_getIdentities__:

public `List <https://docs.oracle.com/javase/7/docs/api/java/util/List.html>`__ getIdentities ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns a new list of the user's identities.
See Also
________

UserIdentity

getProviderType
---------------

.. _io_realm_mongodb_User_getProviderType__:

public :ref:`Credentials.Provider <io_realm_mongodb_Credentials_Provider>` getProviderType ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the provider type used to log the user
getAccessToken
--------------

.. _io_realm_mongodb_User_getAccessToken__:

public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ getAccessToken ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the current access token for the user.
getRefreshToken
---------------

.. _io_realm_mongodb_User_getRefreshToken__:

public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ getRefreshToken ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the current refresh token for the user.
getDeviceId
-----------

.. _io_realm_mongodb_User_getDeviceId__:

public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ getDeviceId ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns a unique identifier for the device the user logged in to.
getApp
------

.. _io_realm_mongodb_User_getApp__:

public :ref:`App <io_realm_mongodb_App>` getApp ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the :ref:`App <io_realm_mongodb_App>` this user is associated with.


getState
--------

.. _io_realm_mongodb_User_getState__:

public :ref:`User.State <io_realm_mongodb_User_State>` getState ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the :ref:`State <io_realm_mongodb_User_State>` the user is in.


getCustomData
-------------

.. _io_realm_mongodb_User_getCustomData__:

public **Document (?)** getCustomData ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Return the custom user data associated with the user in the Realm App.The data is only refreshed when the user's access token is refreshed or when explicitly calling :ref:`#refreshCustomData() <io_realm_mongodb_User_refreshCustomData__>`.




refreshCustomData
-----------------

.. _io_realm_mongodb_User_refreshCustomData__:

public **Document (?)** refreshCustomData ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Re-fetch custom user data from the Realm App.
Throws
______

.. _io_realm_mongodb_User_refreshCustomData_App_Callback_Document__:

public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>` refreshCustomData (:ref:`io.realm.mongodb.App.Callback\<Document> <io_realm_mongodb_App_Callback>` callback)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Re-fetch custom user data from the Realm App asynchronously.This is the asynchronous variant of :ref:`#refreshCustomData() <io_realm_mongodb_User_refreshCustomData__>`.




Parameters
__________

- ``callback - ``The callback that will receive the result or any errors from the request.
   

Throws
______

isLoggedIn
----------

.. _io_realm_mongodb_User_isLoggedIn__:

public **boolean** isLoggedIn ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns true if the user is currently logged in. Returns whether or not this user is still logged into the MongoDB Realm App.
linkCredentials
---------------

.. _io_realm_mongodb_User_linkCredentials_Credentials_:

public :ref:`User <io_realm_mongodb_User>` linkCredentials (:ref:`Credentials <io_realm_mongodb_Credentials>` credentials)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Links the current user with a new user identity represented by the given credentials.Linking a user with more credentials, mean the user can login either of these credentials. It also makes it possible to "upgrade" an anonymous user by linking it with e.g. Email/Password credentials.

 

.. code-block:: java

   
    // Example
    App app = new App("app-id")
    User user = app.login(Credentials.anonymous());
    user.linkCredentials(Credentials.emailPassword("email", "password"));
    


 

Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials must not have been used by another user.


Parameters
__________

- ``credentials - ``the credentials to link with the current user.
   

Throws
______

linkCredentialsAsync
--------------------

.. _io_realm_mongodb_User_linkCredentialsAsync_Credentials__App_Callback_User__:

public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>` linkCredentialsAsync (:ref:`Credentials <io_realm_mongodb_Credentials>` credentials, :ref:`io.realm.mongodb.App.Callback\<io.realm.mongodb.User> <io_realm_mongodb_App_Callback>` callback)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Links the current user with a new user identity represented by the given credentials.Linking a user with more credentials, mean the user can login either of these credentials. It also makes it possible to "upgrade" an anonymous user by linking it with e.g. Email/Password credentials.

 

.. code-block:: java

   
    // Example
    App app = new App("app-id")
    User user = app.login(Credentials.anonymous());
    user.linkCredentials(Credentials.emailPassword("email", "password"));
    


 

Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials must not have been used by another user.


Parameters
__________

- ``credentials - ``the credentials to link with the current user.
   
- ``callback - ``callback when user identities has been linked or it failed. The callback will always happen on the same thread as this method is called on.
   

Throws
______

logOut
------

.. _io_realm_mongodb_User_logOut__:

public **void** logOut ()
~~~~~~~~~~~~~~~~~~~~~~~~~

Log the user out of the Realm App. This will unregister them on the device, stop any synchronization to and from the users' Realms, and those Realms will be deleted next time the app restarts. Therefor logging out should not be done until all changes to Realms have been uploaded to the server.Once the Realm App has confirmed the logout any registered :ref:`AuthenticationListener <io_realm_mongodb_AuthenticationListener>` will be notified and user credentials will be deleted from this device.



Logging out anonymous users will remove them immediately instead of marking them as :ref:`User.State#LOGGED_OUT <io_realm_mongodb_User_State_LOGGED_OUT>`. All other users will be marked as :ref:`User.State#LOGGED_OUT <io_realm_mongodb_User_State_LOGGED_OUT>` and will still be returned by :ref:`App#allUsers() <io_realm_mongodb_App_allUsers__>`. They can be removed completely by calling **App#removeUser(User (?)** ()}.




Throws
______

logOutAsync
-----------

.. _io_realm_mongodb_User_logOutAsync_App_Callback_User__:

public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>` logOutAsync (:ref:`io.realm.mongodb.App.Callback\<io.realm.mongodb.User> <io_realm_mongodb_App_Callback>` callback)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Log the user out of the Realm App asynchronously. This will unregister them on the device, stop any synchronization to and from the users' Realms, and those Realms will be deleted next time the app restarts. Therefor logging out should not be done until all changes to Realms have been uploaded to the server.Once the Realm App has confirmed the logout any registered :ref:`AuthenticationListener <io_realm_mongodb_AuthenticationListener>` will be notified and user credentials will be deleted from this device.



Logging out anonymous users will remove them immediately instead of marking them as :ref:`User.State#LOGGED_OUT <io_realm_mongodb_User_State_LOGGED_OUT>`. All other users will be marked as :ref:`User.State#LOGGED_OUT <io_realm_mongodb_User_State_LOGGED_OUT>` and will still be returned by :ref:`App#allUsers() <io_realm_mongodb_App_allUsers__>`. They can be removed completely by calling :ref:`App#removeUser(User) <io_realm_mongodb_App_removeUser_User_>` ()}.




Parameters
__________

- ``callback - ``callback when logging out has completed or failed. The callback will always happen on the same thread as this method is called on.
   

Throws
______

getApiKeys
----------

.. _io_realm_mongodb_User_getApiKeys__:

public synchronized :ref:`ApiKeyAuth <io_realm_mongodb_auth_ApiKeyAuth>` getApiKeys ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns a wrapper for managing API keys controlled by the current user.
Throws
______

getFunctions
------------

.. _io_realm_mongodb_User_getFunctions__:

public synchronized :ref:`Functions <io_realm_mongodb_functions_Functions>` getFunctions ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns a *functions* manager for invoking MongoDB Realm Functions.This will use the associated app's default codec registry to encode and decode arguments and results.


See Also
________

Functions

.. _io_realm_mongodb_User_getFunctions_CodecRegistry_:

public :ref:`Functions <io_realm_mongodb_functions_Functions>` getFunctions (**CodecRegistry (?)** codecRegistry)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns a *functions* manager for invoking Realm Functions with custom codec registry for encoding and decoding arguments and results.
Parameters
__________

- ``codecRegistry - ``The codec registry to use for encoding and decoding arguments and results towards the remote Realm App.
   

See Also
________

Functions

getPush
-------

.. _io_realm_mongodb_User_getPush_String_:

public synchronized :ref:`Push <io_realm_mongodb_push_Push>` getPush (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ serviceName)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the :ref:`Push <io_realm_mongodb_push_Push>` instance for managing push notification registrations.


Parameters
__________

- ``serviceName - ``the service name used to connect to the server.
   

getMongoClient
--------------

.. _io_realm_mongodb_User_getMongoClient_String_:

public synchronized :ref:`MongoClient <io_realm_mongodb_mongo_MongoClient>` getMongoClient (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ serviceName)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns a :ref:`MongoClient <io_realm_mongodb_mongo_MongoClient>` instance for accessing documents in the database.


Parameters
__________

- ``serviceName - ``the service name used to connect to the server.
   

equals
------

.. _io_realm_mongodb_User_equals_Object_:

public **boolean** equals (`Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ o)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Two Users are considered equal if they have the same user identity and are associated with the same app.
hashCode
--------

.. _io_realm_mongodb_User_hashCode__:

public **int** hashCode ()
~~~~~~~~~~~~~~~~~~~~~~~~~~



