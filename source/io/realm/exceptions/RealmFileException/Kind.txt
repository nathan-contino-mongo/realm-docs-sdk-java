
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

io.realm.exceptions.RealmFileException.Kind
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _io_realm_exceptions_RealmFileException_Kind:

*Superclass:*

- `java.lang.Enum <https://docs.oracle.com/javase/7/docs/api/java/lang/Enum.html>`__

The specific kind of this **RealmFileException (?)**.


Enum Constant Summary
=====================

.. list-table::
   :header-rows: 1
   
   * - Enum Constant
     - Description
   
   * - :ref:`ACCESS_ERROR <io_realm_exceptions_RealmFileException_Kind_ACCESS_ERROR>`
     - Thrown for any I/O related exception scenarios when a Realm is opened.
       
       
       
   
   * - :ref:`BAD_HISTORY <io_realm_exceptions_RealmFileException_Kind_BAD_HISTORY>`
     - Thrown if the history type of the on-disk Realm is unexpected or incompatible.
       
       
       
   
   * - :ref:`PERMISSION_DENIED <io_realm_exceptions_RealmFileException_Kind_PERMISSION_DENIED>`
     - Thrown if the user does not have permission to open or create the specified file in the specified access mode when the Realm is opened.
       
       
       
   
   * - :ref:`EXISTS <io_realm_exceptions_RealmFileException_Kind_EXISTS>`
     - Thrown if the destination file exists but it is not supposed to.
       
       
       
   
   * - :ref:`NOT_FOUND <io_realm_exceptions_RealmFileException_Kind_NOT_FOUND>`
     - Thrown if the relevant file cannot be found.
       
       
       
   
   * - :ref:`INCOMPATIBLE_LOCK_FILE <io_realm_exceptions_RealmFileException_Kind_INCOMPATIBLE_LOCK_FILE>`
     - Thrown if the database file is currently open in another process which cannot share with the current process due to an architecture mismatch.
       
       
       
   
   * - :ref:`FORMAT_UPGRADE_REQUIRED <io_realm_exceptions_RealmFileException_Kind_FORMAT_UPGRADE_REQUIRED>`
     - Thrown if the file needs to be upgraded to a new format, but upgrades have been explicitly disabled.
       
       
       
   
   * - :ref:`INCOMPATIBLE_SYNC_FILE <io_realm_exceptions_RealmFileException_Kind_INCOMPATIBLE_SYNC_FILE>`
     - Thrown if an attempt was made to open an Realm file created with Realm Object Server 1.*, which is not compatible with Realm Object Server 2.*.
       
       
       
   
   
Method Summary
==============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Method and Description
   
   * - public static :ref:`RealmFileException.Kind <io_realm_exceptions_RealmFileException_Kind>`
     - :ref:`values <io_realm_exceptions_RealmFileException_Kind_values____>` ()
       
       
       
       
       
   
   * - public static :ref:`RealmFileException.Kind <io_realm_exceptions_RealmFileException_Kind>`
     - :ref:`valueOf <io_realm_exceptions_RealmFileException_Kind_valueOf__String__>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ name)
       
       
       
       
       
   
   
Enum Constant Detail
====================

.. _io_realm_exceptions_RealmFileException_Kind_ACCESS_ERROR:

``ACCESS_ERROR``
----------------

public static final :ref:`RealmFileException.Kind <io_realm_exceptions_RealmFileException_Kind>`

Thrown for any I/O related exception scenarios when a Realm is opened.

.. _io_realm_exceptions_RealmFileException_Kind_BAD_HISTORY:

``BAD_HISTORY``
---------------

public static final :ref:`RealmFileException.Kind <io_realm_exceptions_RealmFileException_Kind>`

Thrown if the history type of the on-disk Realm is unexpected or incompatible.

.. _io_realm_exceptions_RealmFileException_Kind_PERMISSION_DENIED:

``PERMISSION_DENIED``
---------------------

public static final :ref:`RealmFileException.Kind <io_realm_exceptions_RealmFileException_Kind>`

Thrown if the user does not have permission to open or create the specified file in the specified access
 mode when the Realm is opened.

.. _io_realm_exceptions_RealmFileException_Kind_EXISTS:

``EXISTS``
----------

public static final :ref:`RealmFileException.Kind <io_realm_exceptions_RealmFileException_Kind>`

Thrown if the destination file exists but it is not supposed to.

.. _io_realm_exceptions_RealmFileException_Kind_NOT_FOUND:

``NOT_FOUND``
-------------

public static final :ref:`RealmFileException.Kind <io_realm_exceptions_RealmFileException_Kind>`

Thrown if the relevant file cannot be found.

.. _io_realm_exceptions_RealmFileException_Kind_INCOMPATIBLE_LOCK_FILE:

``INCOMPATIBLE_LOCK_FILE``
--------------------------

public static final :ref:`RealmFileException.Kind <io_realm_exceptions_RealmFileException_Kind>`

Thrown if the database file is currently open in another process which cannot share with the current process
 due to an architecture mismatch.

.. _io_realm_exceptions_RealmFileException_Kind_FORMAT_UPGRADE_REQUIRED:

``FORMAT_UPGRADE_REQUIRED``
---------------------------

public static final :ref:`RealmFileException.Kind <io_realm_exceptions_RealmFileException_Kind>`

Thrown if the file needs to be upgraded to a new format, but upgrades have been explicitly disabled.

.. _io_realm_exceptions_RealmFileException_Kind_INCOMPATIBLE_SYNC_FILE:

``INCOMPATIBLE_SYNC_FILE``
--------------------------

public static final :ref:`RealmFileException.Kind <io_realm_exceptions_RealmFileException_Kind>`

Thrown if an attempt was made to open an Realm file created with Realm Object Server 1.*, which is
 not compatible with Realm Object Server 2.*. This exception should automatically be handled by Realm.

Method Detail
=============

.. _io_realm_exceptions_RealmFileException_Kind_values____:

``values``
----------

public static :ref:`RealmFileException.Kind <io_realm_exceptions_RealmFileException_Kind>` values ()


.. _io_realm_exceptions_RealmFileException_Kind_valueOf__String__:

``valueOf``
-----------

public static :ref:`RealmFileException.Kind <io_realm_exceptions_RealmFileException_Kind>` valueOf (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ name)



