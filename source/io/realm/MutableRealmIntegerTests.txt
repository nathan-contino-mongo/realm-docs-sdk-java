
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol



Class MutableRealmIntegerTests
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _io_realm_MutableRealmIntegerTests:



io.realm
========

`java.lang.Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ 




Constructors
============



- ``io.realm.MutableRealmIntegerTests()`` 




Field Summary
=============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Field and Description
   
   * - ``public final io.realm.TestRealmConfigurationFactory`` 
       
       
     - ``configFactory`` 
       
       
   
   * - ``public final io.realm.rule.RunInLooperThread`` 
       
       
     - ``looperThread`` 
       
       
   
   


Method Summary
==============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Method and Description
   
   * - 
       public **void**
     - 
       :ref:`setUp <io_realm_MutableRealmIntegerTests_setUp__>`  ()
       
       
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`tearDown <io_realm_MutableRealmIntegerTests_tearDown__>`  ()
       
       
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`basic_unmanaged <io_realm_MutableRealmIntegerTests_basic_unmanaged__>`  ()
       
       Validate basic functions: set, increment and decrement.
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`equality_unmanaged <io_realm_MutableRealmIntegerTests_equality_unmanaged__>`  ()
       
       Validate basic equality semantics.
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`nullability_unmanaged <io_realm_MutableRealmIntegerTests_nullability_unmanaged__>`  ()
       
       Validate basic nullability semantics.
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`validAndManaged_unmanaged <io_realm_MutableRealmIntegerTests_validAndManaged_unmanaged__>`  ()
       
       Validate basic validity/managed semantics.
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`basic_managed <io_realm_MutableRealmIntegerTests_basic_managed__>`  ()
       
       Validate basic functions: set, increment and decrement.
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`equality_managed <io_realm_MutableRealmIntegerTests_equality_managed__>`  ()
       
       Validate basic equality semantics.
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`nullability_managed <io_realm_MutableRealmIntegerTests_nullability_managed__>`  ()
       
       Validate basic nullability semantics.
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`validAndManaged_managed <io_realm_MutableRealmIntegerTests_validAndManaged_managed__>`  ()
       
       Validate basic validity/managed semantics.
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`required <io_realm_MutableRealmIntegerTests_required__>`  ()
       
       @Required MutableRealmIntegers should not be nullable.
       
       
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`indexed <io_realm_MutableRealmIntegerTests_indexed__>`  ()
       
       MutableRealmIntegers annotated with @Index should have indices.
       
       
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`compareTo_unmanaged <io_realm_MutableRealmIntegerTests_compareTo_unmanaged__>`  ()
       
       Be absolutely certain that we can actually compare two longs.
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`compareTo_managed <io_realm_MutableRealmIntegerTests_compareTo_managed__>`  ()
       
       Be absolutely certain that we can actually compare two longs.
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`updateOutsideTransactionThrows <io_realm_MutableRealmIntegerTests_updateOutsideTransactionThrows__>`  ()
       
       Assure that an attempt to change the value of a managed MutableRealmInteger, outside a transaction, fails.
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`isLive <io_realm_MutableRealmIntegerTests_isLive__>`  ()
       
       Assure that changes to a MutableRealmInteger acquired from a managed object are reflected in the object.
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`copyToIsLive <io_realm_MutableRealmIntegerTests_copyToIsLive__>`  ()
       
       Assure that changes to a MutableRealmInteger acquired from a managed object are reflected in the object.
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`copyFromIsNotLive <io_realm_MutableRealmIntegerTests_copyFromIsNotLive__>`  ()
       
       Assure that a MutableRealmInteger acquired from an unmanaged object is not affected by changes in the Realm.
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`testJSON <io_realm_MutableRealmIntegerTests_testJSON__>`  ()
       
       
       
       
       
   
   * - 
       public **void**
     - 
       :ref:`testStream <io_realm_MutableRealmIntegerTests_testStream__>`  ()
       
       
       
       
       
   
   


Inherited Methods
=================



- Methods inherited from interface `java.lang.Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ : 
   
   ``getClass`` , ``hashCode`` , ``equals`` , ``clone`` , ``toString`` , ``notify`` , ``notifyAll`` , ``wait`` , ``wait`` , ``wait`` , ``finalize`` 
   
   




Field Detail
============

.. _io_realm_MutableRealmIntegerTests_configFactory:



``configFactory`` 
------------------


.. _io_realm_MutableRealmIntegerTests_looperThread:



``looperThread`` 
-----------------




Method Detail
=============



setUp
-----

.. _io_realm_MutableRealmIntegerTests_setUp__:

.. _io_realm_MutableRealmIntegerTests_setUp__:

.. _io_realm_MutableRealmIntegerTests_setUp__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** setUp ()
   
   * - 
       
       
       
       
       
       
       
       
       
       
       
   
   


tearDown
--------

.. _io_realm_MutableRealmIntegerTests_tearDown__:

.. _io_realm_MutableRealmIntegerTests_tearDown__:

.. _io_realm_MutableRealmIntegerTests_tearDown__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** tearDown ()
   
   * - 
       
       
       
       
       
       
       
       
       
       
       
   
   


basic_unmanaged
---------------

.. _io_realm_MutableRealmIntegerTests_basic_unmanaged__:

.. _io_realm_MutableRealmIntegerTests_basic_unmanaged__:

.. _io_realm_MutableRealmIntegerTests_basic_unmanaged__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** basic_unmanaged ()
   
   * - Validate basic functions: set, increment and decrement.
       
       
       
       
       
       
       
       
       
       
       
   
   


equality_unmanaged
------------------

.. _io_realm_MutableRealmIntegerTests_equality_unmanaged__:

.. _io_realm_MutableRealmIntegerTests_equality_unmanaged__:

.. _io_realm_MutableRealmIntegerTests_equality_unmanaged__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** equality_unmanaged ()
   
   * - Validate basic equality semantics.
       
       
       
       
       
       
       
       
       
       
       
   
   


nullability_unmanaged
---------------------

.. _io_realm_MutableRealmIntegerTests_nullability_unmanaged__:

.. _io_realm_MutableRealmIntegerTests_nullability_unmanaged__:

.. _io_realm_MutableRealmIntegerTests_nullability_unmanaged__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** nullability_unmanaged ()
   
   * - Validate basic nullability semantics.
       
       
       
       
       
       
       
       
       
       
       
   
   


validAndManaged_unmanaged
-------------------------

.. _io_realm_MutableRealmIntegerTests_validAndManaged_unmanaged__:

.. _io_realm_MutableRealmIntegerTests_validAndManaged_unmanaged__:

.. _io_realm_MutableRealmIntegerTests_validAndManaged_unmanaged__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** validAndManaged_unmanaged ()
   
   * - Validate basic validity/managed semantics.
       
       
       
       
       
       
       
       
       
       
       
   
   


basic_managed
-------------

.. _io_realm_MutableRealmIntegerTests_basic_managed__:

.. _io_realm_MutableRealmIntegerTests_basic_managed__:

.. _io_realm_MutableRealmIntegerTests_basic_managed__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** basic_managed ()
   
   * - Validate basic functions: set, increment and decrement.
       
       
       
       
       
       
       
       
       
       
       
   
   


equality_managed
----------------

.. _io_realm_MutableRealmIntegerTests_equality_managed__:

.. _io_realm_MutableRealmIntegerTests_equality_managed__:

.. _io_realm_MutableRealmIntegerTests_equality_managed__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** equality_managed ()
   
   * - Validate basic equality semantics.
       
       
       
       
       
       
       
       
       
       
       
   
   


nullability_managed
-------------------

.. _io_realm_MutableRealmIntegerTests_nullability_managed__:

.. _io_realm_MutableRealmIntegerTests_nullability_managed__:

.. _io_realm_MutableRealmIntegerTests_nullability_managed__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** nullability_managed ()
   
   * - Validate basic nullability semantics.
       
       
       
       
       
       
       
       
       
       
       
   
   


validAndManaged_managed
-----------------------

.. _io_realm_MutableRealmIntegerTests_validAndManaged_managed__:

.. _io_realm_MutableRealmIntegerTests_validAndManaged_managed__:

.. _io_realm_MutableRealmIntegerTests_validAndManaged_managed__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** validAndManaged_managed ()
   
   * - Validate basic validity/managed semantics.
       
       
       
       
       
       
       
       
       
       
       
   
   


required
--------

.. _io_realm_MutableRealmIntegerTests_required__:

.. _io_realm_MutableRealmIntegerTests_required__:

.. _io_realm_MutableRealmIntegerTests_required__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** required ()
   
   * - @Required MutableRealmIntegers should not be nullable. There are other tests testing nullabilty: just need to test @Required here. There is no attempt to control the nullability of an unmanaged MutableRealmInteger. An attempt to copy an unmanaged model object with a null-valued MutableRealmInteger into an @Required field should fail.
       
       
       
       
       
       
       
       
       
       
       
       
       
   
   


indexed
-------

.. _io_realm_MutableRealmIntegerTests_indexed__:

.. _io_realm_MutableRealmIntegerTests_indexed__:

.. _io_realm_MutableRealmIntegerTests_indexed__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** indexed ()
   
   * - MutableRealmIntegers annotated with @Index should have indices. Without @Index they should not.
       
       
       
       
       
       
       
       
       
       
       
       
       
   
   


compareTo_unmanaged
-------------------

.. _io_realm_MutableRealmIntegerTests_compareTo_unmanaged__:

.. _io_realm_MutableRealmIntegerTests_compareTo_unmanaged__:

.. _io_realm_MutableRealmIntegerTests_compareTo_unmanaged__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** compareTo_unmanaged ()
   
   * - Be absolutely certain that we can actually compare two longs.
       
       
       
       
       
       
       
       
       
       
       
   
   


compareTo_managed
-----------------

.. _io_realm_MutableRealmIntegerTests_compareTo_managed__:

.. _io_realm_MutableRealmIntegerTests_compareTo_managed__:

.. _io_realm_MutableRealmIntegerTests_compareTo_managed__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** compareTo_managed ()
   
   * - Be absolutely certain that we can actually compare two longs.
       
       
       
       
       
       
       
       
       
       
       
   
   


updateOutsideTransactionThrows
------------------------------

.. _io_realm_MutableRealmIntegerTests_updateOutsideTransactionThrows__:

.. _io_realm_MutableRealmIntegerTests_updateOutsideTransactionThrows__:

.. _io_realm_MutableRealmIntegerTests_updateOutsideTransactionThrows__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** updateOutsideTransactionThrows ()
   
   * - Assure that an attempt to change the value of a managed MutableRealmInteger, outside a transaction, fails.
       
       
       
       
       
       
       
       
       
       
       
   
   


isLive
------

.. _io_realm_MutableRealmIntegerTests_isLive__:

.. _io_realm_MutableRealmIntegerTests_isLive__:

.. _io_realm_MutableRealmIntegerTests_isLive__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** isLive ()
   
   * - Assure that changes to a MutableRealmInteger acquired from a managed object are reflected in the object.
       
       
       
       
       
       
       
       
       
       
       
   
   


copyToIsLive
------------

.. _io_realm_MutableRealmIntegerTests_copyToIsLive__:

.. _io_realm_MutableRealmIntegerTests_copyToIsLive__:

.. _io_realm_MutableRealmIntegerTests_copyToIsLive__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** copyToIsLive ()
   
   * - Assure that changes to a MutableRealmInteger acquired from a managed object are reflected in the object.
       
       
       
       
       
       
       
       
       
       
       
   
   


copyFromIsNotLive
-----------------

.. _io_realm_MutableRealmIntegerTests_copyFromIsNotLive__:

.. _io_realm_MutableRealmIntegerTests_copyFromIsNotLive__:

.. _io_realm_MutableRealmIntegerTests_copyFromIsNotLive__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** copyFromIsNotLive ()
   
   * - Assure that a MutableRealmInteger acquired from an unmanaged object is not affected by changes in the Realm.
       
       
       
       
       
       
       
       
       
       
       
   
   


testJSON
--------

.. _io_realm_MutableRealmIntegerTests_testJSON__:

.. _io_realm_MutableRealmIntegerTests_testJSON__:

.. _io_realm_MutableRealmIntegerTests_testJSON__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** testJSON ()
   
   * - 
       
       
       
       
       
       
       
       
       
       
       
   
   


testStream
----------

.. _io_realm_MutableRealmIntegerTests_testStream__:

.. _io_realm_MutableRealmIntegerTests_testStream__:

.. _io_realm_MutableRealmIntegerTests_testStream__:

.. list-table::
   :header-rows: 1
   
   * -    public **void** testStream ()
   
   * - 
       
       
       
       
       
       
       
       
       
       
       
   
   

