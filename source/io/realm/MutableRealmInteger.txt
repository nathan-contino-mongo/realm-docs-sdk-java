
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

io.realm.MutableRealmInteger
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _io_realm_MutableRealmInteger:

*Superclass:*

- `java.lang.Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__

*Implemented interfaces:*

- `java.lang.Comparable <https://docs.oracle.com/javase/7/docs/api/java/lang/Comparable.html>`__

A ``MutableRealmInteger`` is a mutable, `Long <https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html>`__-like numeric quantity. It behaves almost exactly as a reference to a `Long <https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html>`__. More specifically:

- A ``MutableRealmInteger`` may have the value ``null``.
   
   
   
   
- The **#equals (?)** operator compares the contained `Long <https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html>`__ values. ``null``-valued ``MutableRealmInteger`` are ``.equals``
   
   
   
   
- The **#compareTo (?)** operator compares the contained `Long <https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html>`__ values. It considers ``null`` < any non-``null`` value.
   
   
   
   
- The **#increment (?)** and **#decrement (?)** operators throw `IllegalStateException <https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html>`__ when applied to a ``null``-valued ``MutableRealmInteger``.
   
   
   
   

``MutableRealmInteger``s are most interesting as members of a managed :ref:`RealmModel <io_realm_RealmModel>` object. When managed, the **#increment (?)** and **#decrement (?)** operators implement a 

`conflict free replicated data type <https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type>`__: Simultaneous increments and decrements from multiple distributed clients will be aggregated correctly. For instance, if the value of ``counter`` field for the object representing user "Fred" is currently 0, then the following code, executed on two different devices, simultaneously, even if connected by only a slow, unreliable network, will 

**always** cause the value of ``counter`` to converge, eventually on the value 2.





.. code-block:: java

     MutableRealmInteger counter = realm.where(Users.class)
        .equalTo("name", Fred)
        .findFirst()
        .counter.increment(1);
    

Note that the :ref:`#set(Long) <io_realm_MutableRealmInteger_set_Long_>` operator must be used with extreme care. It will quash the effects of any prior calls to :ref:`#increment(long) <io_realm_MutableRealmInteger_increment_long_>` or :ref:`#decrement(long) <io_realm_MutableRealmInteger_decrement_long_>`. Although the value of a ``MutableRealmInteger`` will always converge across devices, the specific value on which it converges will depend on the actual order in which operations took place. Mixing :ref:`#set(Long) <io_realm_MutableRealmInteger_set_Long_>` with :ref:`#increment(long) <io_realm_MutableRealmInteger_increment_long_>` and :ref:`#decrement(long) <io_realm_MutableRealmInteger_decrement_long_>` is, therefore, not advised, unless fuzzy counting is acceptable.

``MutableRealmInteger``s may not be primary keys. Their implementations are not thread safe. Like all managed Realm objects, managed ``MutableRealmInteger``s may not be moved across threads. Unmanaged ``MutableRealmInteger``s may be moved across threads but require safe publication.



A ``MutableRealmInteger``, in a model class, must always be declared ``final``. For instance:



 `` public final MutableRealmInteger counter = MutableRealmInteger.ofNull(); ``
 

Although initializing the ``MutableRealmInteger`` as ``null`` may work very limited circumstances, developers are advised 

**not** to do it: 

.. code-block:: java

   
     public final MutableRealmInteger counter = null; // DO NOT DO THIS! 


 

Also note that when a ``MutableRealmInteger`` is ``@Required``, it is better, though not required, to initialize it with a non-null value.

 
  @Required
  public final MutableRealmInteger counter = MutableRealmInteger.valueOf(0L);
 

A reference to a managed ``MutableRealmInteger`` is subject to all of the constraints that apply to the model object from which it was obtained: It can only be mutated within a transaction and it becomes invalid if the Realm backing it is closed. Use the ``isManaged()`` and ``isValid()`` operators to determine whether a ``MutableRealmInteger`` is in a consistent state. Note, in particular, that a reference to a managed ``MutableRealmInteger`` retains a reference to the model object to which it belongs. For example in this code:



 `` MutableRealmInteger counter = realm.where(Users.class).findFirst().counter; ``
 

the ``counter`` holds a reference to the ``User`` model object from which it was obtained. Neither can be GCed until all references to both are unreachable.


Method Summary
==============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Method and Description
   
   * - public static :ref:`MutableRealmInteger <io_realm_MutableRealmInteger>`
     - :ref:`valueOf <io_realm_MutableRealmInteger_valueOf_Long_>` (`Long <https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html>`__ value)
       
       Creates a new, unmanaged ``MutableRealmInteger`` with the specified initial value.
       
       
       
       
       
   
   * - public static :ref:`MutableRealmInteger <io_realm_MutableRealmInteger>`
     - :ref:`ofNull <io_realm_MutableRealmInteger_ofNull__>` ()
       
       Creates a new, unmanaged ``MutableRealmInteger`` whose value is ``null``.
       
       
       
       
       
   
   * - public static :ref:`MutableRealmInteger <io_realm_MutableRealmInteger>`
     - :ref:`valueOf <io_realm_MutableRealmInteger_valueOf_long_>` (**long** value)
       
       Creates a new, unmanaged ``MutableRealmInteger`` with the specified initial value.
       
       
       
       
       
   
   * - public static :ref:`MutableRealmInteger <io_realm_MutableRealmInteger>`
     - :ref:`valueOf <io_realm_MutableRealmInteger_valueOf_String_>` (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ value)
       
       Creates a new, unmanaged ``MutableRealmInteger`` with the specified initial value.
       
       
       
       
       
   
   * - public abstract `Long <https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html>`__
     - :ref:`get <io_realm_MutableRealmInteger_get__>` ()
       
       Gets the ``MutableRealmInteger`` value.
       
       
       
       
       
   
   * - public abstract **void**
     - :ref:`set <io_realm_MutableRealmInteger_set_Long_>` (`Long <https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html>`__ newValue)
       
       Sets the ``MutableRealmInteger`` value.
       
       
       
       
       
   
   * - public final **void**
     - :ref:`set <io_realm_MutableRealmInteger_set_long_>` (**long** newValue)
       
       Sets the ``MutableRealmInteger`` value.
       
       
       
       
       
   
   * - public abstract **void**
     - :ref:`increment <io_realm_MutableRealmInteger_increment_long_>` (**long** inc)
       
       Increments the ``MutableRealmInteger``, adding the value of the argument.
       
       
       
       
       
   
   * - public abstract **void**
     - :ref:`decrement <io_realm_MutableRealmInteger_decrement_long_>` (**long** dec)
       
       Decrements the ``MutableRealmInteger``, subtracting the value of the argument.
       
       
       
       
       
   
   * - public final **boolean**
     - :ref:`isNull <io_realm_MutableRealmInteger_isNull__>` ()
       
       
       
       
       
   
   * - public final **int**
     - :ref:`compareTo <io_realm_MutableRealmInteger_compareTo_MutableRealmInteger_>` (:ref:`MutableRealmInteger <io_realm_MutableRealmInteger>` o)
       
       ``MutableRealmInteger``s compare strictly by their values.
       
       
       
       
       
   
   * - public final **int**
     - :ref:`hashCode <io_realm_MutableRealmInteger_hashCode__>` ()
       
       A ``MutableRealmInteger``'s hash code is, exactly, the hash code of its value.
       
       
       
       
       
   
   * - public final **boolean**
     - :ref:`equals <io_realm_MutableRealmInteger_equals_Object_>` (`Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ o)
       
       Two ``MutableRealmInteger``s are ``.equals`` if and only if their ``longValues`` are equal.
       
       
       
       
       
   
   
Method Detail
=============

valueOf
-------

.. _io_realm_MutableRealmInteger_valueOf_Long_:

public static :ref:`MutableRealmInteger <io_realm_MutableRealmInteger>` valueOf (`Long <https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html>`__ value)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Creates a new, unmanaged ``MutableRealmInteger`` with the specified initial value.


Parameters
__________

- ``value - ``initial value.
   

.. _io_realm_MutableRealmInteger_valueOf_long_:

public static :ref:`MutableRealmInteger <io_realm_MutableRealmInteger>` valueOf (**long** value)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Creates a new, unmanaged ``MutableRealmInteger`` with the specified initial value.


Parameters
__________

- ``value - ``initial value.
   

.. _io_realm_MutableRealmInteger_valueOf_String_:

public static :ref:`MutableRealmInteger <io_realm_MutableRealmInteger>` valueOf (`String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ value)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Creates a new, unmanaged ``MutableRealmInteger`` with the specified initial value.


Parameters
__________

- ``value - ``initial value: parsed by `Long#parseLong <https://docs.oracle.com/javase/7/docs/api/java/lang/Long/parseLong.html>`__.
   
   
   

ofNull
------

.. _io_realm_MutableRealmInteger_ofNull__:

public static :ref:`MutableRealmInteger <io_realm_MutableRealmInteger>` ofNull ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Creates a new, unmanaged ``MutableRealmInteger`` whose value is ``null``.


get
----

.. _io_realm_MutableRealmInteger_get__:

public abstract `Long <https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html>`__ get ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Gets the ``MutableRealmInteger`` value. The value may be null.


set
----

.. _io_realm_MutableRealmInteger_set_Long_:

public abstract **void** set (`Long <https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html>`__ newValue)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sets the ``MutableRealmInteger`` value. Calling ``set`` forcibly sets the ``MutableRealmInteger`` to the provided value. Doing this obliterates the effects of any calls to **#increment (?)** and **#decrement (?)** perceived before the call to ``set``.


Parameters
__________

- ``newValue - ``new value.
   

.. _io_realm_MutableRealmInteger_set_long_:

public final **void** set (**long** newValue)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sets the ``MutableRealmInteger`` value. Calling **#set (?)** forcibly sets the ``MutableRealmInteger`` to the provided value. Doing this obliterates the effects of any calls to **#increment (?)** and **#decrement (?)** perceived before the call to **#set (?)**.


Parameters
__________

- ``newValue - ``new value.
   

increment
---------

.. _io_realm_MutableRealmInteger_increment_long_:

public abstract **void** increment (**long** inc)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Increments the ``MutableRealmInteger``, adding the value of the argument. Increment/decrement from all devices are reflected in the new value, which is guaranteed to converge.


Parameters
__________

- ``inc - ``quantity to be added to the ``MutableRealmInteger``.
   
   
   

decrement
---------

.. _io_realm_MutableRealmInteger_decrement_long_:

public abstract **void** decrement (**long** dec)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Decrements the ``MutableRealmInteger``, subtracting the value of the argument. Increment/decrement from all devices are reflected in the new value, which is guaranteed to converge.


Parameters
__________

- ``dec - ``quantity to be subtracted from the ``MutableRealmInteger``.
   
   
   

isNull
------

.. _io_realm_MutableRealmInteger_isNull__:

public final **boolean** isNull ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


compareTo
---------

.. _io_realm_MutableRealmInteger_compareTo_MutableRealmInteger_:

public final **int** compareTo (:ref:`MutableRealmInteger <io_realm_MutableRealmInteger>` o)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``MutableRealmInteger``s compare strictly by their values. Null is a legal value for a ``MutableRealmInteger`` and ``null`` < any non-``null`` value


Parameters
__________

- ``o - ``the compare target
   

hashCode
--------

.. _io_realm_MutableRealmInteger_hashCode__:

public final **int** hashCode ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A ``MutableRealmInteger``'s hash code is, exactly, the hash code of its value.


equals
------

.. _io_realm_MutableRealmInteger_equals_Object_:

public final **boolean** equals (`Object <https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html>`__ o)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Two ``MutableRealmInteger``s are ``.equals`` if and only if their ``longValues`` are equal.


Parameters
__________

- ``o - ``compare target
   


